/*
 * This file is generated by jOOQ.
 */
package ru.smartsarov.citylighting.sprut.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.smartsarov.citylighting.sprut.DefaultSchema;
import ru.smartsarov.citylighting.sprut.Keys;
import ru.smartsarov.citylighting.sprut.tables.records.ReportRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Report extends TableImpl<ReportRecord> {

    private static final long serialVersionUID = 1039009727;

    /**
     * The reference instance of <code>REPORT</code>
     */
    public static final Report REPORT = new Report();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ReportRecord> getRecordType() {
        return ReportRecord.class;
    }

    /**
     * The column <code>REPORT.RPT_ID</code>.
     */
    public final TableField<ReportRecord, Integer> RPT_ID = createField("RPT_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>REPORT.RPT_PARENT_ID</code>.
     */
    public final TableField<ReportRecord, Integer> RPT_PARENT_ID = createField("RPT_PARENT_ID", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>REPORT.RPT_NAME</code>.
     */
    public final TableField<ReportRecord, String> RPT_NAME = createField("RPT_NAME", org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>REPORT.RPT_TYPE</code>.
     */
    public final TableField<ReportRecord, Integer> RPT_TYPE = createField("RPT_TYPE", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>REPORT.RPT_MEMO</code>.
     */
    public final TableField<ReportRecord, String> RPT_MEMO = createField("RPT_MEMO", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>REPORT.RPT_DATA</code>.
     */
    public final TableField<ReportRecord, byte[]> RPT_DATA = createField("RPT_DATA", org.jooq.impl.SQLDataType.BLOB, this, "");

    /**
     * The column <code>REPORT.RPT_RECUCLE</code>.
     */
    public final TableField<ReportRecord, Integer> RPT_RECUCLE = createField("RPT_RECUCLE", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>REPORT</code> table reference
     */
    public Report() {
        this(DSL.name("REPORT"), null);
    }

    /**
     * Create an aliased <code>REPORT</code> table reference
     */
    public Report(String alias) {
        this(DSL.name(alias), REPORT);
    }

    /**
     * Create an aliased <code>REPORT</code> table reference
     */
    public Report(Name alias) {
        this(alias, REPORT);
    }

    private Report(Name alias, Table<ReportRecord> aliased) {
        this(alias, aliased, null);
    }

    private Report(Name alias, Table<ReportRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Report(Table<O> child, ForeignKey<O, ReportRecord> key) {
        super(child, key, REPORT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ReportRecord> getPrimaryKey() {
        return Keys.INTEG_121;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ReportRecord>> getKeys() {
        return Arrays.<UniqueKey<ReportRecord>>asList(Keys.INTEG_121);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Report as(String alias) {
        return new Report(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Report as(Name alias) {
        return new Report(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Report rename(String name) {
        return new Report(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Report rename(Name name) {
        return new Report(name, null);
    }
}
