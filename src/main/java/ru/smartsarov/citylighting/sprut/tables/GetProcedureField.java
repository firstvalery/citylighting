/*
 * This file is generated by jOOQ.
 */
package ru.smartsarov.citylighting.sprut.tables;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.smartsarov.citylighting.sprut.DefaultSchema;
import ru.smartsarov.citylighting.sprut.tables.records.GetProcedureFieldRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GetProcedureField extends TableImpl<GetProcedureFieldRecord> {

    private static final long serialVersionUID = 171212790;

    /**
     * The reference instance of <code>GET_PROCEDURE_FIELD</code>
     */
    public static final GetProcedureField GET_PROCEDURE_FIELD = new GetProcedureField();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GetProcedureFieldRecord> getRecordType() {
        return GetProcedureFieldRecord.class;
    }

    /**
     * The column <code>GET_PROCEDURE_FIELD.FIELD</code>.
     */
    public final TableField<GetProcedureFieldRecord, String> FIELD = createField("FIELD", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>GET_PROCEDURE_FIELD.F_TYPE</code>.
     */
    public final TableField<GetProcedureFieldRecord, Integer> F_TYPE = createField("F_TYPE", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>GET_PROCEDURE_FIELD.F_POSITION</code>.
     */
    public final TableField<GetProcedureFieldRecord, Integer> F_POSITION = createField("F_POSITION", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>GET_PROCEDURE_FIELD</code> table reference
     */
    public GetProcedureField() {
        this(DSL.name("GET_PROCEDURE_FIELD"), null);
    }

    /**
     * Create an aliased <code>GET_PROCEDURE_FIELD</code> table reference
     */
    public GetProcedureField(String alias) {
        this(DSL.name(alias), GET_PROCEDURE_FIELD);
    }

    /**
     * Create an aliased <code>GET_PROCEDURE_FIELD</code> table reference
     */
    public GetProcedureField(Name alias) {
        this(alias, GET_PROCEDURE_FIELD);
    }

    private GetProcedureField(Name alias, Table<GetProcedureFieldRecord> aliased) {
        this(alias, aliased, new Field[1]);
    }

    private GetProcedureField(Name alias, Table<GetProcedureFieldRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> GetProcedureField(Table<O> child, ForeignKey<O, GetProcedureFieldRecord> key) {
        super(child, key, GET_PROCEDURE_FIELD);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GetProcedureField as(String alias) {
        return new GetProcedureField(DSL.name(alias), this, parameters);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GetProcedureField as(Name alias) {
        return new GetProcedureField(alias, this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public GetProcedureField rename(String name) {
        return new GetProcedureField(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public GetProcedureField rename(Name name) {
        return new GetProcedureField(name, null, parameters);
    }

    /**
     * Call this table-valued function
     */
    public GetProcedureField call(String name) {
        return new GetProcedureField(DSL.name(getName()), null, new Field[] { 
              DSL.val(name, org.jooq.impl.SQLDataType.VARCHAR(100))
        });
    }

    /**
     * Call this table-valued function
     */
    public GetProcedureField call(Field<String> name) {
        return new GetProcedureField(DSL.name(getName()), null, new Field[] { 
              name
        });
    }
}
