/*
 * This file is generated by jOOQ.
 */
package ru.smartsarov.citylighting.sprut.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.smartsarov.citylighting.sprut.DefaultSchema;
import ru.smartsarov.citylighting.sprut.Keys;
import ru.smartsarov.citylighting.sprut.tables.records.ExmoduleRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Exmodule extends TableImpl<ExmoduleRecord> {

    private static final long serialVersionUID = -113311217;

    /**
     * The reference instance of <code>EXMODULE</code>
     */
    public static final Exmodule EXMODULE = new Exmodule();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExmoduleRecord> getRecordType() {
        return ExmoduleRecord.class;
    }

    /**
     * The column <code>EXMODULE.EXMDL_ID</code>.
     */
    public final TableField<ExmoduleRecord, Integer> EXMDL_ID = createField("EXMDL_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>EXMODULE.EXMDL_USK_ID</code>.
     */
    public final TableField<ExmoduleRecord, Integer> EXMDL_USK_ID = createField("EXMDL_USK_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>EXMODULE.EXMDL_TYPE</code>.
     */
    public final TableField<ExmoduleRecord, Integer> EXMDL_TYPE = createField("EXMDL_TYPE", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>EXMODULE.EXMDL_NETADR</code>.
     */
    public final TableField<ExmoduleRecord, Integer> EXMDL_NETADR = createField("EXMDL_NETADR", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>EXMODULE.EXMDL_NAME</code>.
     */
    public final TableField<ExmoduleRecord, String> EXMDL_NAME = createField("EXMDL_NAME", org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>EXMODULE.EXMDL_DELAY</code>.
     */
    public final TableField<ExmoduleRecord, Integer> EXMDL_DELAY = createField("EXMDL_DELAY", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>EXMODULE.EXMDL_ENABLE</code>.
     */
    public final TableField<ExmoduleRecord, Integer> EXMDL_ENABLE = createField("EXMDL_ENABLE", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>EXMODULE</code> table reference
     */
    public Exmodule() {
        this(DSL.name("EXMODULE"), null);
    }

    /**
     * Create an aliased <code>EXMODULE</code> table reference
     */
    public Exmodule(String alias) {
        this(DSL.name(alias), EXMODULE);
    }

    /**
     * Create an aliased <code>EXMODULE</code> table reference
     */
    public Exmodule(Name alias) {
        this(alias, EXMODULE);
    }

    private Exmodule(Name alias, Table<ExmoduleRecord> aliased) {
        this(alias, aliased, null);
    }

    private Exmodule(Name alias, Table<ExmoduleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Exmodule(Table<O> child, ForeignKey<O, ExmoduleRecord> key) {
        super(child, key, EXMODULE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ExmoduleRecord> getPrimaryKey() {
        return Keys.INTEG_100;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ExmoduleRecord>> getKeys() {
        return Arrays.<UniqueKey<ExmoduleRecord>>asList(Keys.INTEG_100);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Exmodule as(String alias) {
        return new Exmodule(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Exmodule as(Name alias) {
        return new Exmodule(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Exmodule rename(String name) {
        return new Exmodule(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Exmodule rename(Name name) {
        return new Exmodule(name, null);
    }
}
