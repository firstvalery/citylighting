/*
 * This file is generated by jOOQ.
 */
package ru.smartsarov.citylighting.sprut.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.smartsarov.citylighting.sprut.DefaultSchema;
import ru.smartsarov.citylighting.sprut.Keys;
import ru.smartsarov.citylighting.sprut.tables.records.NormativeMeterRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NormativeMeter extends TableImpl<NormativeMeterRecord> {

    private static final long serialVersionUID = -1241725349;

    /**
     * The reference instance of <code>NORMATIVE_METER</code>
     */
    public static final NormativeMeter NORMATIVE_METER = new NormativeMeter();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NormativeMeterRecord> getRecordType() {
        return NormativeMeterRecord.class;
    }

    /**
     * The column <code>NORMATIVE_METER.ID</code>.
     */
    public final TableField<NormativeMeterRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>NORMATIVE_METER.NORM_ID</code>.
     */
    public final TableField<NormativeMeterRecord, Integer> NORM_ID = createField("NORM_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>NORMATIVE_METER.TYPE1</code>.
     */
    public final TableField<NormativeMeterRecord, Short> TYPE1 = createField("TYPE1", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>NORMATIVE_METER.TYPE2</code>.
     */
    public final TableField<NormativeMeterRecord, Short> TYPE2 = createField("TYPE2", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>NORMATIVE_METER.TYPE3</code>.
     */
    public final TableField<NormativeMeterRecord, Short> TYPE3 = createField("TYPE3", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>NORMATIVE_METER.TYPE4</code>.
     */
    public final TableField<NormativeMeterRecord, Short> TYPE4 = createField("TYPE4", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>NORMATIVE_METER.IN_1</code>.
     */
    public final TableField<NormativeMeterRecord, Double> IN_1 = createField("IN_1", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>NORMATIVE_METER.IN_2</code>.
     */
    public final TableField<NormativeMeterRecord, Double> IN_2 = createField("IN_2", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>NORMATIVE_METER.IN_3</code>.
     */
    public final TableField<NormativeMeterRecord, Double> IN_3 = createField("IN_3", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>NORMATIVE_METER.IN_4</code>.
     */
    public final TableField<NormativeMeterRecord, Double> IN_4 = createField("IN_4", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>NORMATIVE_METER.IN_5</code>.
     */
    public final TableField<NormativeMeterRecord, Double> IN_5 = createField("IN_5", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>NORMATIVE_METER.IN_6</code>.
     */
    public final TableField<NormativeMeterRecord, Double> IN_6 = createField("IN_6", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>NORMATIVE_METER.IN_7</code>.
     */
    public final TableField<NormativeMeterRecord, Double> IN_7 = createField("IN_7", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>NORMATIVE_METER.IN_8</code>.
     */
    public final TableField<NormativeMeterRecord, Double> IN_8 = createField("IN_8", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>NORMATIVE_METER.OUT_1</code>.
     */
    public final TableField<NormativeMeterRecord, Double> OUT_1 = createField("OUT_1", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>NORMATIVE_METER.OUT_2</code>.
     */
    public final TableField<NormativeMeterRecord, Double> OUT_2 = createField("OUT_2", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>NORMATIVE_METER.OUT_3</code>.
     */
    public final TableField<NormativeMeterRecord, Double> OUT_3 = createField("OUT_3", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>NORMATIVE_METER.OUT_4</code>.
     */
    public final TableField<NormativeMeterRecord, Double> OUT_4 = createField("OUT_4", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>NORMATIVE_METER.OUT_5</code>.
     */
    public final TableField<NormativeMeterRecord, Double> OUT_5 = createField("OUT_5", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>NORMATIVE_METER.OUT_6</code>.
     */
    public final TableField<NormativeMeterRecord, Double> OUT_6 = createField("OUT_6", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>NORMATIVE_METER.OUT_7</code>.
     */
    public final TableField<NormativeMeterRecord, Double> OUT_7 = createField("OUT_7", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>NORMATIVE_METER.OUT_8</code>.
     */
    public final TableField<NormativeMeterRecord, Double> OUT_8 = createField("OUT_8", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * Create a <code>NORMATIVE_METER</code> table reference
     */
    public NormativeMeter() {
        this(DSL.name("NORMATIVE_METER"), null);
    }

    /**
     * Create an aliased <code>NORMATIVE_METER</code> table reference
     */
    public NormativeMeter(String alias) {
        this(DSL.name(alias), NORMATIVE_METER);
    }

    /**
     * Create an aliased <code>NORMATIVE_METER</code> table reference
     */
    public NormativeMeter(Name alias) {
        this(alias, NORMATIVE_METER);
    }

    private NormativeMeter(Name alias, Table<NormativeMeterRecord> aliased) {
        this(alias, aliased, null);
    }

    private NormativeMeter(Name alias, Table<NormativeMeterRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> NormativeMeter(Table<O> child, ForeignKey<O, NormativeMeterRecord> key) {
        super(child, key, NORMATIVE_METER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<NormativeMeterRecord> getPrimaryKey() {
        return Keys.NORMATIVE_METER_KEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<NormativeMeterRecord>> getKeys() {
        return Arrays.<UniqueKey<NormativeMeterRecord>>asList(Keys.NORMATIVE_METER_KEY, Keys.NORMATIVE_METER_UNQ);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NormativeMeter as(String alias) {
        return new NormativeMeter(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NormativeMeter as(Name alias) {
        return new NormativeMeter(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public NormativeMeter rename(String name) {
        return new NormativeMeter(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NormativeMeter rename(Name name) {
        return new NormativeMeter(name, null);
    }
}
