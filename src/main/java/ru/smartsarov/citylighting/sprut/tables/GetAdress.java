/*
 * This file is generated by jOOQ.
 */
package ru.smartsarov.citylighting.sprut.tables;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.smartsarov.citylighting.sprut.DefaultSchema;
import ru.smartsarov.citylighting.sprut.tables.records.GetAdressRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GetAdress extends TableImpl<GetAdressRecord> {

    private static final long serialVersionUID = 524592147;

    /**
     * The reference instance of <code>GET_ADRESS</code>
     */
    public static final GetAdress GET_ADRESS = new GetAdress();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GetAdressRecord> getRecordType() {
        return GetAdressRecord.class;
    }

    /**
     * The column <code>GET_ADRESS.ADR_STR</code>.
     */
    public final TableField<GetAdressRecord, String> ADR_STR = createField("ADR_STR", org.jooq.impl.SQLDataType.VARCHAR(250), this, "");

    /**
     * Create a <code>GET_ADRESS</code> table reference
     */
    public GetAdress() {
        this(DSL.name("GET_ADRESS"), null);
    }

    /**
     * Create an aliased <code>GET_ADRESS</code> table reference
     */
    public GetAdress(String alias) {
        this(DSL.name(alias), GET_ADRESS);
    }

    /**
     * Create an aliased <code>GET_ADRESS</code> table reference
     */
    public GetAdress(Name alias) {
        this(alias, GET_ADRESS);
    }

    private GetAdress(Name alias, Table<GetAdressRecord> aliased) {
        this(alias, aliased, new Field[2]);
    }

    private GetAdress(Name alias, Table<GetAdressRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> GetAdress(Table<O> child, ForeignKey<O, GetAdressRecord> key) {
        super(child, key, GET_ADRESS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GetAdress as(String alias) {
        return new GetAdress(DSL.name(alias), this, parameters);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GetAdress as(Name alias) {
        return new GetAdress(alias, this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public GetAdress rename(String name) {
        return new GetAdress(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public GetAdress rename(Name name) {
        return new GetAdress(name, null, parameters);
    }

    /**
     * Call this table-valued function
     */
    public GetAdress call(Integer adrId, Integer adrType) {
        return new GetAdress(DSL.name(getName()), null, new Field[] { 
              DSL.val(adrId, org.jooq.impl.SQLDataType.INTEGER)
            , DSL.val(adrType, org.jooq.impl.SQLDataType.INTEGER)
        });
    }

    /**
     * Call this table-valued function
     */
    public GetAdress call(Field<Integer> adrId, Field<Integer> adrType) {
        return new GetAdress(DSL.name(getName()), null, new Field[] { 
              adrId
            , adrType
        });
    }
}
