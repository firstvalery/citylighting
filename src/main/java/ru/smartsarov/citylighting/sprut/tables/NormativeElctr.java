/*
 * This file is generated by jOOQ.
 */
package ru.smartsarov.citylighting.sprut.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.smartsarov.citylighting.sprut.DefaultSchema;
import ru.smartsarov.citylighting.sprut.Keys;
import ru.smartsarov.citylighting.sprut.tables.records.NormativeElctrRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NormativeElctr extends TableImpl<NormativeElctrRecord> {

    private static final long serialVersionUID = -791057015;

    /**
     * The reference instance of <code>NORMATIVE_ELCTR</code>
     */
    public static final NormativeElctr NORMATIVE_ELCTR = new NormativeElctr();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NormativeElctrRecord> getRecordType() {
        return NormativeElctrRecord.class;
    }

    /**
     * The column <code>NORMATIVE_ELCTR.ID</code>.
     */
    public final TableField<NormativeElctrRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>NORMATIVE_ELCTR.NORM_ID</code>.
     */
    public final TableField<NormativeElctrRecord, Integer> NORM_ID = createField("NORM_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>NORMATIVE_ELCTR.TYPE1</code>.
     */
    public final TableField<NormativeElctrRecord, Short> TYPE1 = createField("TYPE1", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>NORMATIVE_ELCTR.TYPE2</code>.
     */
    public final TableField<NormativeElctrRecord, Short> TYPE2 = createField("TYPE2", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>NORMATIVE_ELCTR.TYPE3</code>.
     */
    public final TableField<NormativeElctrRecord, Short> TYPE3 = createField("TYPE3", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>NORMATIVE_ELCTR.TYPE4</code>.
     */
    public final TableField<NormativeElctrRecord, Short> TYPE4 = createField("TYPE4", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>NORMATIVE_ELCTR.AP</code>.
     */
    public final TableField<NormativeElctrRecord, Double> AP = createField("AP", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>NORMATIVE_ELCTR.AM</code>.
     */
    public final TableField<NormativeElctrRecord, Double> AM = createField("AM", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>NORMATIVE_ELCTR.RP</code>.
     */
    public final TableField<NormativeElctrRecord, Double> RP = createField("RP", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>NORMATIVE_ELCTR.RM</code>.
     */
    public final TableField<NormativeElctrRecord, Double> RM = createField("RM", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>NORMATIVE_ELCTR.P</code>.
     */
    public final TableField<NormativeElctrRecord, Double> P = createField("P", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>NORMATIVE_ELCTR.PA</code>.
     */
    public final TableField<NormativeElctrRecord, Double> PA = createField("PA", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>NORMATIVE_ELCTR.PB</code>.
     */
    public final TableField<NormativeElctrRecord, Double> PB = createField("PB", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>NORMATIVE_ELCTR.PC</code>.
     */
    public final TableField<NormativeElctrRecord, Double> PC = createField("PC", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>NORMATIVE_ELCTR.Q</code>.
     */
    public final TableField<NormativeElctrRecord, Double> Q = createField("Q", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>NORMATIVE_ELCTR.QA</code>.
     */
    public final TableField<NormativeElctrRecord, Double> QA = createField("QA", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>NORMATIVE_ELCTR.QB</code>.
     */
    public final TableField<NormativeElctrRecord, Double> QB = createField("QB", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>NORMATIVE_ELCTR.QC</code>.
     */
    public final TableField<NormativeElctrRecord, Double> QC = createField("QC", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>NORMATIVE_ELCTR.QP</code>.
     */
    public final TableField<NormativeElctrRecord, Double> QP = createField("QP", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>NORMATIVE_ELCTR.UA</code>.
     */
    public final TableField<NormativeElctrRecord, Double> UA = createField("UA", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>NORMATIVE_ELCTR.UB</code>.
     */
    public final TableField<NormativeElctrRecord, Double> UB = createField("UB", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>NORMATIVE_ELCTR.UC</code>.
     */
    public final TableField<NormativeElctrRecord, Double> UC = createField("UC", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>NORMATIVE_ELCTR.IA</code>.
     */
    public final TableField<NormativeElctrRecord, Double> IA = createField("IA", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>NORMATIVE_ELCTR.IB</code>.
     */
    public final TableField<NormativeElctrRecord, Double> IB = createField("IB", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>NORMATIVE_ELCTR.IC</code>.
     */
    public final TableField<NormativeElctrRecord, Double> IC = createField("IC", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>NORMATIVE_ELCTR.F</code>.
     */
    public final TableField<NormativeElctrRecord, Double> F = createField("F", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>NORMATIVE_ELCTR.COS_F</code>.
     */
    public final TableField<NormativeElctrRecord, Double> COS_F = createField("COS_F", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>NORMATIVE_ELCTR.COS_FA</code>.
     */
    public final TableField<NormativeElctrRecord, Double> COS_FA = createField("COS_FA", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>NORMATIVE_ELCTR.COS_FB</code>.
     */
    public final TableField<NormativeElctrRecord, Double> COS_FB = createField("COS_FB", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>NORMATIVE_ELCTR.COS_FC</code>.
     */
    public final TableField<NormativeElctrRecord, Double> COS_FC = createField("COS_FC", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * Create a <code>NORMATIVE_ELCTR</code> table reference
     */
    public NormativeElctr() {
        this(DSL.name("NORMATIVE_ELCTR"), null);
    }

    /**
     * Create an aliased <code>NORMATIVE_ELCTR</code> table reference
     */
    public NormativeElctr(String alias) {
        this(DSL.name(alias), NORMATIVE_ELCTR);
    }

    /**
     * Create an aliased <code>NORMATIVE_ELCTR</code> table reference
     */
    public NormativeElctr(Name alias) {
        this(alias, NORMATIVE_ELCTR);
    }

    private NormativeElctr(Name alias, Table<NormativeElctrRecord> aliased) {
        this(alias, aliased, null);
    }

    private NormativeElctr(Name alias, Table<NormativeElctrRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> NormativeElctr(Table<O> child, ForeignKey<O, NormativeElctrRecord> key) {
        super(child, key, NORMATIVE_ELCTR);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<NormativeElctrRecord> getPrimaryKey() {
        return Keys.NORMATIVE_ELCTR_KEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<NormativeElctrRecord>> getKeys() {
        return Arrays.<UniqueKey<NormativeElctrRecord>>asList(Keys.NORMATIVE_ELCTR_KEY, Keys.NORMATIVE_ELCTR_UNQ);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NormativeElctr as(String alias) {
        return new NormativeElctr(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NormativeElctr as(Name alias) {
        return new NormativeElctr(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public NormativeElctr rename(String name) {
        return new NormativeElctr(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NormativeElctr rename(Name name) {
        return new NormativeElctr(name, null);
    }
}
