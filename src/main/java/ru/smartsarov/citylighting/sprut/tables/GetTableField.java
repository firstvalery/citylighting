/*
 * This file is generated by jOOQ.
 */
package ru.smartsarov.citylighting.sprut.tables;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.smartsarov.citylighting.sprut.DefaultSchema;
import ru.smartsarov.citylighting.sprut.tables.records.GetTableFieldRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GetTableField extends TableImpl<GetTableFieldRecord> {

    private static final long serialVersionUID = 1038718269;

    /**
     * The reference instance of <code>GET_TABLE_FIELD</code>
     */
    public static final GetTableField GET_TABLE_FIELD = new GetTableField();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GetTableFieldRecord> getRecordType() {
        return GetTableFieldRecord.class;
    }

    /**
     * The column <code>GET_TABLE_FIELD.FIELD</code>.
     */
    public final TableField<GetTableFieldRecord, String> FIELD = createField("FIELD", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>GET_TABLE_FIELD.F_TYPE</code>.
     */
    public final TableField<GetTableFieldRecord, Integer> F_TYPE = createField("F_TYPE", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>GET_TABLE_FIELD.F_POSITION</code>.
     */
    public final TableField<GetTableFieldRecord, Integer> F_POSITION = createField("F_POSITION", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>GET_TABLE_FIELD</code> table reference
     */
    public GetTableField() {
        this(DSL.name("GET_TABLE_FIELD"), null);
    }

    /**
     * Create an aliased <code>GET_TABLE_FIELD</code> table reference
     */
    public GetTableField(String alias) {
        this(DSL.name(alias), GET_TABLE_FIELD);
    }

    /**
     * Create an aliased <code>GET_TABLE_FIELD</code> table reference
     */
    public GetTableField(Name alias) {
        this(alias, GET_TABLE_FIELD);
    }

    private GetTableField(Name alias, Table<GetTableFieldRecord> aliased) {
        this(alias, aliased, new Field[1]);
    }

    private GetTableField(Name alias, Table<GetTableFieldRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> GetTableField(Table<O> child, ForeignKey<O, GetTableFieldRecord> key) {
        super(child, key, GET_TABLE_FIELD);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GetTableField as(String alias) {
        return new GetTableField(DSL.name(alias), this, parameters);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GetTableField as(Name alias) {
        return new GetTableField(alias, this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public GetTableField rename(String name) {
        return new GetTableField(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public GetTableField rename(Name name) {
        return new GetTableField(name, null, parameters);
    }

    /**
     * Call this table-valued function
     */
    public GetTableField call(String name) {
        return new GetTableField(DSL.name(getName()), null, new Field[] { 
              DSL.val(name, org.jooq.impl.SQLDataType.VARCHAR(100))
        });
    }

    /**
     * Call this table-valued function
     */
    public GetTableField call(Field<String> name) {
        return new GetTableField(DSL.name(getName()), null, new Field[] { 
              name
        });
    }
}
