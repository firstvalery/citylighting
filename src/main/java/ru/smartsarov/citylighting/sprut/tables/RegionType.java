/*
 * This file is generated by jOOQ.
 */
package ru.smartsarov.citylighting.sprut.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.smartsarov.citylighting.sprut.DefaultSchema;
import ru.smartsarov.citylighting.sprut.Keys;
import ru.smartsarov.citylighting.sprut.tables.records.RegionTypeRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RegionType extends TableImpl<RegionTypeRecord> {

    private static final long serialVersionUID = 161114398;

    /**
     * The reference instance of <code>REGION_TYPE</code>
     */
    public static final RegionType REGION_TYPE = new RegionType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RegionTypeRecord> getRecordType() {
        return RegionTypeRecord.class;
    }

    /**
     * The column <code>REGION_TYPE.RGNT_ID</code>.
     */
    public final TableField<RegionTypeRecord, Integer> RGNT_ID = createField("RGNT_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>REGION_TYPE.RGNT_NAME</code>.
     */
    public final TableField<RegionTypeRecord, String> RGNT_NAME = createField("RGNT_NAME", org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>REGION_TYPE.RGNT_SNAME</code>.
     */
    public final TableField<RegionTypeRecord, String> RGNT_SNAME = createField("RGNT_SNAME", org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * Create a <code>REGION_TYPE</code> table reference
     */
    public RegionType() {
        this(DSL.name("REGION_TYPE"), null);
    }

    /**
     * Create an aliased <code>REGION_TYPE</code> table reference
     */
    public RegionType(String alias) {
        this(DSL.name(alias), REGION_TYPE);
    }

    /**
     * Create an aliased <code>REGION_TYPE</code> table reference
     */
    public RegionType(Name alias) {
        this(alias, REGION_TYPE);
    }

    private RegionType(Name alias, Table<RegionTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private RegionType(Name alias, Table<RegionTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> RegionType(Table<O> child, ForeignKey<O, RegionTypeRecord> key) {
        super(child, key, REGION_TYPE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<RegionTypeRecord> getPrimaryKey() {
        return Keys.INTEG_15;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<RegionTypeRecord>> getKeys() {
        return Arrays.<UniqueKey<RegionTypeRecord>>asList(Keys.INTEG_15);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RegionType as(String alias) {
        return new RegionType(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RegionType as(Name alias) {
        return new RegionType(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RegionType rename(String name) {
        return new RegionType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RegionType rename(Name name) {
        return new RegionType(name, null);
    }
}
