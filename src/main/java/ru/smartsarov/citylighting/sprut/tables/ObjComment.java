/*
 * This file is generated by jOOQ.
 */
package ru.smartsarov.citylighting.sprut.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.smartsarov.citylighting.sprut.DefaultSchema;
import ru.smartsarov.citylighting.sprut.Keys;
import ru.smartsarov.citylighting.sprut.tables.records.ObjCommentRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ObjComment extends TableImpl<ObjCommentRecord> {

    private static final long serialVersionUID = -2110393197;

    /**
     * The reference instance of <code>OBJ_COMMENT</code>
     */
    public static final ObjComment OBJ_COMMENT = new ObjComment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ObjCommentRecord> getRecordType() {
        return ObjCommentRecord.class;
    }

    /**
     * The column <code>OBJ_COMMENT.OBJ_ID</code>.
     */
    public final TableField<ObjCommentRecord, Integer> OBJ_ID = createField("OBJ_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>OBJ_COMMENT.OBJ_TYPE</code>.
     */
    public final TableField<ObjCommentRecord, Integer> OBJ_TYPE = createField("OBJ_TYPE", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>OBJ_COMMENT.OBJ_VAL</code>.
     */
    public final TableField<ObjCommentRecord, String> OBJ_VAL = createField("OBJ_VAL", org.jooq.impl.SQLDataType.VARCHAR(500), this, "");

    /**
     * The column <code>OBJ_COMMENT.OBJ_PARAM</code>.
     */
    public final TableField<ObjCommentRecord, String> OBJ_PARAM = createField("OBJ_PARAM", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * Create a <code>OBJ_COMMENT</code> table reference
     */
    public ObjComment() {
        this(DSL.name("OBJ_COMMENT"), null);
    }

    /**
     * Create an aliased <code>OBJ_COMMENT</code> table reference
     */
    public ObjComment(String alias) {
        this(DSL.name(alias), OBJ_COMMENT);
    }

    /**
     * Create an aliased <code>OBJ_COMMENT</code> table reference
     */
    public ObjComment(Name alias) {
        this(alias, OBJ_COMMENT);
    }

    private ObjComment(Name alias, Table<ObjCommentRecord> aliased) {
        this(alias, aliased, null);
    }

    private ObjComment(Name alias, Table<ObjCommentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ObjComment(Table<O> child, ForeignKey<O, ObjCommentRecord> key) {
        super(child, key, OBJ_COMMENT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ObjCommentRecord> getPrimaryKey() {
        return Keys.OBJ_COMMENT_KEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ObjCommentRecord>> getKeys() {
        return Arrays.<UniqueKey<ObjCommentRecord>>asList(Keys.OBJ_COMMENT_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ObjComment as(String alias) {
        return new ObjComment(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ObjComment as(Name alias) {
        return new ObjComment(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ObjComment rename(String name) {
        return new ObjComment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ObjComment rename(Name name) {
        return new ObjComment(name, null);
    }
}
