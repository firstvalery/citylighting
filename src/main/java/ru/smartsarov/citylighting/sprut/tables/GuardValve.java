/*
 * This file is generated by jOOQ.
 */
package ru.smartsarov.citylighting.sprut.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.smartsarov.citylighting.sprut.DefaultSchema;
import ru.smartsarov.citylighting.sprut.Keys;
import ru.smartsarov.citylighting.sprut.tables.records.GuardValveRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GuardValve extends TableImpl<GuardValveRecord> {

    private static final long serialVersionUID = -204695881;

    /**
     * The reference instance of <code>GUARD_VALVE</code>
     */
    public static final GuardValve GUARD_VALVE = new GuardValve();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GuardValveRecord> getRecordType() {
        return GuardValveRecord.class;
    }

    /**
     * The column <code>GUARD_VALVE.VALVE_ID</code>.
     */
    public final TableField<GuardValveRecord, Integer> VALVE_ID = createField("VALVE_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>GUARD_VALVE.VALVE_ZID</code>.
     */
    public final TableField<GuardValveRecord, Integer> VALVE_ZID = createField("VALVE_ZID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>GUARD_VALVE.VALVE_UNK_ID</code>.
     */
    public final TableField<GuardValveRecord, Integer> VALVE_UNK_ID = createField("VALVE_UNK_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>GUARD_VALVE.VALVE_TYPE</code>.
     */
    public final TableField<GuardValveRecord, Integer> VALVE_TYPE = createField("VALVE_TYPE", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>GUARD_VALVE.VALVE_ENTRY</code>.
     */
    public final TableField<GuardValveRecord, Integer> VALVE_ENTRY = createField("VALVE_ENTRY", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>GUARD_VALVE.VALVE_NETADR</code>.
     */
    public final TableField<GuardValveRecord, Integer> VALVE_NETADR = createField("VALVE_NETADR", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>GUARD_VALVE.VALVE_NAME</code>.
     */
    public final TableField<GuardValveRecord, String> VALVE_NAME = createField("VALVE_NAME", org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>GUARD_VALVE.VALVE_DELAY</code>.
     */
    public final TableField<GuardValveRecord, Integer> VALVE_DELAY = createField("VALVE_DELAY", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>GUARD_VALVE.VALVE_ATYPE</code>.
     */
    public final TableField<GuardValveRecord, Integer> VALVE_ATYPE = createField("VALVE_ATYPE", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>GUARD_VALVE.VALVE_ON</code>.
     */
    public final TableField<GuardValveRecord, Integer> VALVE_ON = createField("VALVE_ON", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>GUARD_VALVE.VALVE_REM</code>.
     */
    public final TableField<GuardValveRecord, String> VALVE_REM = createField("VALVE_REM", org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * Create a <code>GUARD_VALVE</code> table reference
     */
    public GuardValve() {
        this(DSL.name("GUARD_VALVE"), null);
    }

    /**
     * Create an aliased <code>GUARD_VALVE</code> table reference
     */
    public GuardValve(String alias) {
        this(DSL.name(alias), GUARD_VALVE);
    }

    /**
     * Create an aliased <code>GUARD_VALVE</code> table reference
     */
    public GuardValve(Name alias) {
        this(alias, GUARD_VALVE);
    }

    private GuardValve(Name alias, Table<GuardValveRecord> aliased) {
        this(alias, aliased, null);
    }

    private GuardValve(Name alias, Table<GuardValveRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> GuardValve(Table<O> child, ForeignKey<O, GuardValveRecord> key) {
        super(child, key, GUARD_VALVE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<GuardValveRecord> getPrimaryKey() {
        return Keys.INTEG_88;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<GuardValveRecord>> getKeys() {
        return Arrays.<UniqueKey<GuardValveRecord>>asList(Keys.INTEG_88);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GuardValve as(String alias) {
        return new GuardValve(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GuardValve as(Name alias) {
        return new GuardValve(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public GuardValve rename(String name) {
        return new GuardValve(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public GuardValve rename(Name name) {
        return new GuardValve(name, null);
    }
}
