/*
 * This file is generated by jOOQ.
 */
package ru.smartsarov.citylighting.sprut.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.smartsarov.citylighting.sprut.DefaultSchema;
import ru.smartsarov.citylighting.sprut.Keys;
import ru.smartsarov.citylighting.sprut.tables.records.UskRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Usk extends TableImpl<UskRecord> {

    private static final long serialVersionUID = -453642483;

    /**
     * The reference instance of <code>USK</code>
     */
    public static final Usk USK = new Usk();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UskRecord> getRecordType() {
        return UskRecord.class;
    }

    /**
     * The column <code>USK.USK_ID</code>.
     */
    public final TableField<UskRecord, Integer> USK_ID = createField("USK_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>USK.USK_AB_ID</code>.
     */
    public final TableField<UskRecord, Integer> USK_AB_ID = createField("USK_AB_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>USK.USK_UID</code>.
     */
    public final TableField<UskRecord, Integer> USK_UID = createField("USK_UID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>USK.USK_TYPE</code>.
     */
    public final TableField<UskRecord, Integer> USK_TYPE = createField("USK_TYPE", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>USK.USK_IP</code>.
     */
    public final TableField<UskRecord, String> USK_IP = createField("USK_IP", org.jooq.impl.SQLDataType.VARCHAR(15), this, "");

    /**
     * The column <code>USK.USK_NAME</code>.
     */
    public final TableField<UskRecord, String> USK_NAME = createField("USK_NAME", org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>USK.USK_PASSWORD</code>.
     */
    public final TableField<UskRecord, byte[]> USK_PASSWORD = createField("USK_PASSWORD", org.jooq.impl.SQLDataType.BLOB, this, "");

    /**
     * The column <code>USK.USK_ADR_ID</code>.
     */
    public final TableField<UskRecord, Integer> USK_ADR_ID = createField("USK_ADR_ID", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>USK.USK_SDATE</code>.
     */
    public final TableField<UskRecord, Timestamp> USK_SDATE = createField("USK_SDATE", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>USK.USK_EDATE</code>.
     */
    public final TableField<UskRecord, Timestamp> USK_EDATE = createField("USK_EDATE", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>USK.USK_SOST</code>.
     */
    public final TableField<UskRecord, Integer> USK_SOST = createField("USK_SOST", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>USK.USK_PASS2</code>.
     */
    public final TableField<UskRecord, String> USK_PASS2 = createField("USK_PASS2", org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * Create a <code>USK</code> table reference
     */
    public Usk() {
        this(DSL.name("USK"), null);
    }

    /**
     * Create an aliased <code>USK</code> table reference
     */
    public Usk(String alias) {
        this(DSL.name(alias), USK);
    }

    /**
     * Create an aliased <code>USK</code> table reference
     */
    public Usk(Name alias) {
        this(alias, USK);
    }

    private Usk(Name alias, Table<UskRecord> aliased) {
        this(alias, aliased, null);
    }

    private Usk(Name alias, Table<UskRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Usk(Table<O> child, ForeignKey<O, UskRecord> key) {
        super(child, key, USK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UskRecord> getPrimaryKey() {
        return Keys.INTEG_95;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UskRecord>> getKeys() {
        return Arrays.<UniqueKey<UskRecord>>asList(Keys.INTEG_95);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Usk as(String alias) {
        return new Usk(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Usk as(Name alias) {
        return new Usk(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Usk rename(String name) {
        return new Usk(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Usk rename(Name name) {
        return new Usk(name, null);
    }
}
