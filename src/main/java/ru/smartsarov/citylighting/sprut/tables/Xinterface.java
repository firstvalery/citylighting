/*
 * This file is generated by jOOQ.
 */
package ru.smartsarov.citylighting.sprut.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.smartsarov.citylighting.sprut.DefaultSchema;
import ru.smartsarov.citylighting.sprut.Keys;
import ru.smartsarov.citylighting.sprut.tables.records.XinterfaceRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Xinterface extends TableImpl<XinterfaceRecord> {

    private static final long serialVersionUID = 1997931533;

    /**
     * The reference instance of <code>XINTERFACE</code>
     */
    public static final Xinterface XINTERFACE = new Xinterface();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<XinterfaceRecord> getRecordType() {
        return XinterfaceRecord.class;
    }

    /**
     * The column <code>XINTERFACE.INTF_ID</code>.
     */
    public final TableField<XinterfaceRecord, Integer> INTF_ID = createField("INTF_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>XINTERFACE.INTF_PARENT_ID</code>.
     */
    public final TableField<XinterfaceRecord, Integer> INTF_PARENT_ID = createField("INTF_PARENT_ID", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>XINTERFACE.INTF_NAME</code>.
     */
    public final TableField<XinterfaceRecord, String> INTF_NAME = createField("INTF_NAME", org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>XINTERFACE.INTF_MEMO</code>.
     */
    public final TableField<XinterfaceRecord, String> INTF_MEMO = createField("INTF_MEMO", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>XINTERFACE.RPT_RECUCLE</code>.
     */
    public final TableField<XinterfaceRecord, Integer> RPT_RECUCLE = createField("RPT_RECUCLE", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>XINTERFACE</code> table reference
     */
    public Xinterface() {
        this(DSL.name("XINTERFACE"), null);
    }

    /**
     * Create an aliased <code>XINTERFACE</code> table reference
     */
    public Xinterface(String alias) {
        this(DSL.name(alias), XINTERFACE);
    }

    /**
     * Create an aliased <code>XINTERFACE</code> table reference
     */
    public Xinterface(Name alias) {
        this(alias, XINTERFACE);
    }

    private Xinterface(Name alias, Table<XinterfaceRecord> aliased) {
        this(alias, aliased, null);
    }

    private Xinterface(Name alias, Table<XinterfaceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Xinterface(Table<O> child, ForeignKey<O, XinterfaceRecord> key) {
        super(child, key, XINTERFACE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<XinterfaceRecord> getPrimaryKey() {
        return Keys.INTEG_104;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<XinterfaceRecord>> getKeys() {
        return Arrays.<UniqueKey<XinterfaceRecord>>asList(Keys.INTEG_104);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Xinterface as(String alias) {
        return new Xinterface(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Xinterface as(Name alias) {
        return new Xinterface(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Xinterface rename(String name) {
        return new Xinterface(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Xinterface rename(Name name) {
        return new Xinterface(name, null);
    }
}
