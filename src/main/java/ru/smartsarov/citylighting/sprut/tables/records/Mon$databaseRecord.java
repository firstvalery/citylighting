/*
 * This file is generated by jOOQ.
 */
package ru.smartsarov.citylighting.sprut.tables.records;


import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record19;
import org.jooq.Row19;
import org.jooq.impl.TableRecordImpl;

import ru.smartsarov.citylighting.sprut.tables.Mon$database;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Mon$databaseRecord extends TableRecordImpl<Mon$databaseRecord> implements Record19<String, Short, Short, Short, Integer, Integer, Integer, Integer, Integer, Short, Short, Integer, Short, Short, Short, Timestamp, Long, Integer, Short> {

    private static final long serialVersionUID = 1926015074;

    /**
     * Setter for <code>MON$DATABASE.MON$DATABASE_NAME</code>.
     */
    public void setMon$databaseName(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>MON$DATABASE.MON$DATABASE_NAME</code>.
     */
    public String getMon$databaseName() {
        return (String) get(0);
    }

    /**
     * Setter for <code>MON$DATABASE.MON$PAGE_SIZE</code>.
     */
    public void setMon$pageSize(Short value) {
        set(1, value);
    }

    /**
     * Getter for <code>MON$DATABASE.MON$PAGE_SIZE</code>.
     */
    public Short getMon$pageSize() {
        return (Short) get(1);
    }

    /**
     * Setter for <code>MON$DATABASE.MON$ODS_MAJOR</code>.
     */
    public void setMon$odsMajor(Short value) {
        set(2, value);
    }

    /**
     * Getter for <code>MON$DATABASE.MON$ODS_MAJOR</code>.
     */
    public Short getMon$odsMajor() {
        return (Short) get(2);
    }

    /**
     * Setter for <code>MON$DATABASE.MON$ODS_MINOR</code>.
     */
    public void setMon$odsMinor(Short value) {
        set(3, value);
    }

    /**
     * Getter for <code>MON$DATABASE.MON$ODS_MINOR</code>.
     */
    public Short getMon$odsMinor() {
        return (Short) get(3);
    }

    /**
     * Setter for <code>MON$DATABASE.MON$OLDEST_TRANSACTION</code>.
     */
    public void setMon$oldestTransaction(Integer value) {
        set(4, value);
    }

    /**
     * Getter for <code>MON$DATABASE.MON$OLDEST_TRANSACTION</code>.
     */
    public Integer getMon$oldestTransaction() {
        return (Integer) get(4);
    }

    /**
     * Setter for <code>MON$DATABASE.MON$OLDEST_ACTIVE</code>.
     */
    public void setMon$oldestActive(Integer value) {
        set(5, value);
    }

    /**
     * Getter for <code>MON$DATABASE.MON$OLDEST_ACTIVE</code>.
     */
    public Integer getMon$oldestActive() {
        return (Integer) get(5);
    }

    /**
     * Setter for <code>MON$DATABASE.MON$OLDEST_SNAPSHOT</code>.
     */
    public void setMon$oldestSnapshot(Integer value) {
        set(6, value);
    }

    /**
     * Getter for <code>MON$DATABASE.MON$OLDEST_SNAPSHOT</code>.
     */
    public Integer getMon$oldestSnapshot() {
        return (Integer) get(6);
    }

    /**
     * Setter for <code>MON$DATABASE.MON$NEXT_TRANSACTION</code>.
     */
    public void setMon$nextTransaction(Integer value) {
        set(7, value);
    }

    /**
     * Getter for <code>MON$DATABASE.MON$NEXT_TRANSACTION</code>.
     */
    public Integer getMon$nextTransaction() {
        return (Integer) get(7);
    }

    /**
     * Setter for <code>MON$DATABASE.MON$PAGE_BUFFERS</code>.
     */
    public void setMon$pageBuffers(Integer value) {
        set(8, value);
    }

    /**
     * Getter for <code>MON$DATABASE.MON$PAGE_BUFFERS</code>.
     */
    public Integer getMon$pageBuffers() {
        return (Integer) get(8);
    }

    /**
     * Setter for <code>MON$DATABASE.MON$SQL_DIALECT</code>.
     */
    public void setMon$sqlDialect(Short value) {
        set(9, value);
    }

    /**
     * Getter for <code>MON$DATABASE.MON$SQL_DIALECT</code>.
     */
    public Short getMon$sqlDialect() {
        return (Short) get(9);
    }

    /**
     * Setter for <code>MON$DATABASE.MON$SHUTDOWN_MODE</code>.
     */
    public void setMon$shutdownMode(Short value) {
        set(10, value);
    }

    /**
     * Getter for <code>MON$DATABASE.MON$SHUTDOWN_MODE</code>.
     */
    public Short getMon$shutdownMode() {
        return (Short) get(10);
    }

    /**
     * Setter for <code>MON$DATABASE.MON$SWEEP_INTERVAL</code>.
     */
    public void setMon$sweepInterval(Integer value) {
        set(11, value);
    }

    /**
     * Getter for <code>MON$DATABASE.MON$SWEEP_INTERVAL</code>.
     */
    public Integer getMon$sweepInterval() {
        return (Integer) get(11);
    }

    /**
     * Setter for <code>MON$DATABASE.MON$READ_ONLY</code>.
     */
    public void setMon$readOnly(Short value) {
        set(12, value);
    }

    /**
     * Getter for <code>MON$DATABASE.MON$READ_ONLY</code>.
     */
    public Short getMon$readOnly() {
        return (Short) get(12);
    }

    /**
     * Setter for <code>MON$DATABASE.MON$FORCED_WRITES</code>.
     */
    public void setMon$forcedWrites(Short value) {
        set(13, value);
    }

    /**
     * Getter for <code>MON$DATABASE.MON$FORCED_WRITES</code>.
     */
    public Short getMon$forcedWrites() {
        return (Short) get(13);
    }

    /**
     * Setter for <code>MON$DATABASE.MON$RESERVE_SPACE</code>.
     */
    public void setMon$reserveSpace(Short value) {
        set(14, value);
    }

    /**
     * Getter for <code>MON$DATABASE.MON$RESERVE_SPACE</code>.
     */
    public Short getMon$reserveSpace() {
        return (Short) get(14);
    }

    /**
     * Setter for <code>MON$DATABASE.MON$CREATION_DATE</code>.
     */
    public void setMon$creationDate(Timestamp value) {
        set(15, value);
    }

    /**
     * Getter for <code>MON$DATABASE.MON$CREATION_DATE</code>.
     */
    public Timestamp getMon$creationDate() {
        return (Timestamp) get(15);
    }

    /**
     * Setter for <code>MON$DATABASE.MON$PAGES</code>.
     */
    public void setMon$pages(Long value) {
        set(16, value);
    }

    /**
     * Getter for <code>MON$DATABASE.MON$PAGES</code>.
     */
    public Long getMon$pages() {
        return (Long) get(16);
    }

    /**
     * Setter for <code>MON$DATABASE.MON$STAT_ID</code>.
     */
    public void setMon$statId(Integer value) {
        set(17, value);
    }

    /**
     * Getter for <code>MON$DATABASE.MON$STAT_ID</code>.
     */
    public Integer getMon$statId() {
        return (Integer) get(17);
    }

    /**
     * Setter for <code>MON$DATABASE.MON$BACKUP_STATE</code>.
     */
    public void setMon$backupState(Short value) {
        set(18, value);
    }

    /**
     * Getter for <code>MON$DATABASE.MON$BACKUP_STATE</code>.
     */
    public Short getMon$backupState() {
        return (Short) get(18);
    }

    // -------------------------------------------------------------------------
    // Record19 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row19<String, Short, Short, Short, Integer, Integer, Integer, Integer, Integer, Short, Short, Integer, Short, Short, Short, Timestamp, Long, Integer, Short> fieldsRow() {
        return (Row19) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row19<String, Short, Short, Short, Integer, Integer, Integer, Integer, Integer, Short, Short, Integer, Short, Short, Short, Timestamp, Long, Integer, Short> valuesRow() {
        return (Row19) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field1() {
        return Mon$database.MON$DATABASE.MON$DATABASE_NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Short> field2() {
        return Mon$database.MON$DATABASE.MON$PAGE_SIZE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Short> field3() {
        return Mon$database.MON$DATABASE.MON$ODS_MAJOR;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Short> field4() {
        return Mon$database.MON$DATABASE.MON$ODS_MINOR;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field5() {
        return Mon$database.MON$DATABASE.MON$OLDEST_TRANSACTION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field6() {
        return Mon$database.MON$DATABASE.MON$OLDEST_ACTIVE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field7() {
        return Mon$database.MON$DATABASE.MON$OLDEST_SNAPSHOT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field8() {
        return Mon$database.MON$DATABASE.MON$NEXT_TRANSACTION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field9() {
        return Mon$database.MON$DATABASE.MON$PAGE_BUFFERS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Short> field10() {
        return Mon$database.MON$DATABASE.MON$SQL_DIALECT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Short> field11() {
        return Mon$database.MON$DATABASE.MON$SHUTDOWN_MODE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field12() {
        return Mon$database.MON$DATABASE.MON$SWEEP_INTERVAL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Short> field13() {
        return Mon$database.MON$DATABASE.MON$READ_ONLY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Short> field14() {
        return Mon$database.MON$DATABASE.MON$FORCED_WRITES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Short> field15() {
        return Mon$database.MON$DATABASE.MON$RESERVE_SPACE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Timestamp> field16() {
        return Mon$database.MON$DATABASE.MON$CREATION_DATE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field17() {
        return Mon$database.MON$DATABASE.MON$PAGES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field18() {
        return Mon$database.MON$DATABASE.MON$STAT_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Short> field19() {
        return Mon$database.MON$DATABASE.MON$BACKUP_STATE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component1() {
        return getMon$databaseName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short component2() {
        return getMon$pageSize();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short component3() {
        return getMon$odsMajor();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short component4() {
        return getMon$odsMinor();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component5() {
        return getMon$oldestTransaction();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component6() {
        return getMon$oldestActive();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component7() {
        return getMon$oldestSnapshot();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component8() {
        return getMon$nextTransaction();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component9() {
        return getMon$pageBuffers();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short component10() {
        return getMon$sqlDialect();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short component11() {
        return getMon$shutdownMode();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component12() {
        return getMon$sweepInterval();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short component13() {
        return getMon$readOnly();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short component14() {
        return getMon$forcedWrites();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short component15() {
        return getMon$reserveSpace();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp component16() {
        return getMon$creationDate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long component17() {
        return getMon$pages();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component18() {
        return getMon$statId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short component19() {
        return getMon$backupState();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value1() {
        return getMon$databaseName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short value2() {
        return getMon$pageSize();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short value3() {
        return getMon$odsMajor();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short value4() {
        return getMon$odsMinor();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value5() {
        return getMon$oldestTransaction();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value6() {
        return getMon$oldestActive();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value7() {
        return getMon$oldestSnapshot();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value8() {
        return getMon$nextTransaction();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value9() {
        return getMon$pageBuffers();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short value10() {
        return getMon$sqlDialect();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short value11() {
        return getMon$shutdownMode();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value12() {
        return getMon$sweepInterval();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short value13() {
        return getMon$readOnly();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short value14() {
        return getMon$forcedWrites();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short value15() {
        return getMon$reserveSpace();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp value16() {
        return getMon$creationDate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value17() {
        return getMon$pages();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value18() {
        return getMon$statId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short value19() {
        return getMon$backupState();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Mon$databaseRecord value1(String value) {
        setMon$databaseName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Mon$databaseRecord value2(Short value) {
        setMon$pageSize(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Mon$databaseRecord value3(Short value) {
        setMon$odsMajor(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Mon$databaseRecord value4(Short value) {
        setMon$odsMinor(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Mon$databaseRecord value5(Integer value) {
        setMon$oldestTransaction(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Mon$databaseRecord value6(Integer value) {
        setMon$oldestActive(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Mon$databaseRecord value7(Integer value) {
        setMon$oldestSnapshot(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Mon$databaseRecord value8(Integer value) {
        setMon$nextTransaction(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Mon$databaseRecord value9(Integer value) {
        setMon$pageBuffers(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Mon$databaseRecord value10(Short value) {
        setMon$sqlDialect(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Mon$databaseRecord value11(Short value) {
        setMon$shutdownMode(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Mon$databaseRecord value12(Integer value) {
        setMon$sweepInterval(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Mon$databaseRecord value13(Short value) {
        setMon$readOnly(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Mon$databaseRecord value14(Short value) {
        setMon$forcedWrites(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Mon$databaseRecord value15(Short value) {
        setMon$reserveSpace(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Mon$databaseRecord value16(Timestamp value) {
        setMon$creationDate(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Mon$databaseRecord value17(Long value) {
        setMon$pages(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Mon$databaseRecord value18(Integer value) {
        setMon$statId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Mon$databaseRecord value19(Short value) {
        setMon$backupState(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Mon$databaseRecord values(String value1, Short value2, Short value3, Short value4, Integer value5, Integer value6, Integer value7, Integer value8, Integer value9, Short value10, Short value11, Integer value12, Short value13, Short value14, Short value15, Timestamp value16, Long value17, Integer value18, Short value19) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        value15(value15);
        value16(value16);
        value17(value17);
        value18(value18);
        value19(value19);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached Mon$databaseRecord
     */
    public Mon$databaseRecord() {
        super(Mon$database.MON$DATABASE);
    }

    /**
     * Create a detached, initialised Mon$databaseRecord
     */
    public Mon$databaseRecord(String mon$databaseName, Short mon$pageSize, Short mon$odsMajor, Short mon$odsMinor, Integer mon$oldestTransaction, Integer mon$oldestActive, Integer mon$oldestSnapshot, Integer mon$nextTransaction, Integer mon$pageBuffers, Short mon$sqlDialect, Short mon$shutdownMode, Integer mon$sweepInterval, Short mon$readOnly, Short mon$forcedWrites, Short mon$reserveSpace, Timestamp mon$creationDate, Long mon$pages, Integer mon$statId, Short mon$backupState) {
        super(Mon$database.MON$DATABASE);

        set(0, mon$databaseName);
        set(1, mon$pageSize);
        set(2, mon$odsMajor);
        set(3, mon$odsMinor);
        set(4, mon$oldestTransaction);
        set(5, mon$oldestActive);
        set(6, mon$oldestSnapshot);
        set(7, mon$nextTransaction);
        set(8, mon$pageBuffers);
        set(9, mon$sqlDialect);
        set(10, mon$shutdownMode);
        set(11, mon$sweepInterval);
        set(12, mon$readOnly);
        set(13, mon$forcedWrites);
        set(14, mon$reserveSpace);
        set(15, mon$creationDate);
        set(16, mon$pages);
        set(17, mon$statId);
        set(18, mon$backupState);
    }
}
