/*
 * This file is generated by jOOQ.
 */
package ru.smartsarov.citylighting.sprut.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.smartsarov.citylighting.sprut.DefaultSchema;
import ru.smartsarov.citylighting.sprut.Keys;
import ru.smartsarov.citylighting.sprut.tables.records.CntlRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Cntl extends TableImpl<CntlRecord> {

    private static final long serialVersionUID = -1847240720;

    /**
     * The reference instance of <code>CNTL</code>
     */
    public static final Cntl CNTL = new Cntl();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CntlRecord> getRecordType() {
        return CntlRecord.class;
    }

    /**
     * The column <code>CNTL.CNTL_ID</code>.
     */
    public final TableField<CntlRecord, Integer> CNTL_ID = createField("CNTL_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>CNTL.CNTL_TYPE</code>.
     */
    public final TableField<CntlRecord, Integer> CNTL_TYPE = createField("CNTL_TYPE", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>CNTL.CNTL_STATE</code>.
     */
    public final TableField<CntlRecord, Integer> CNTL_STATE = createField("CNTL_STATE", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>CNTL.CNTL_CID</code>.
     */
    public final TableField<CntlRecord, Integer> CNTL_CID = createField("CNTL_CID", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>CNTL.CNTL_PID</code>.
     */
    public final TableField<CntlRecord, Integer> CNTL_PID = createField("CNTL_PID", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>CNTL.CNTL_AB_ID</code>.
     */
    public final TableField<CntlRecord, Integer> CNTL_AB_ID = createField("CNTL_AB_ID", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>CNTL.CNTL_UNK_ID</code>.
     */
    public final TableField<CntlRecord, Integer> CNTL_UNK_ID = createField("CNTL_UNK_ID", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>CNTL.CNTL_ATYPE</code>.
     */
    public final TableField<CntlRecord, Integer> CNTL_ATYPE = createField("CNTL_ATYPE", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>CNTL.CNTL_BTYPE</code>.
     */
    public final TableField<CntlRecord, Integer> CNTL_BTYPE = createField("CNTL_BTYPE", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>CNTL.CNTL_VALUE1</code>.
     */
    public final TableField<CntlRecord, Double> CNTL_VALUE1 = createField("CNTL_VALUE1", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>CNTL.CNTL_VALUE2</code>.
     */
    public final TableField<CntlRecord, Double> CNTL_VALUE2 = createField("CNTL_VALUE2", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>CNTL.CNTL_VALUE3</code>.
     */
    public final TableField<CntlRecord, Double> CNTL_VALUE3 = createField("CNTL_VALUE3", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>CNTL.CNTL_VALUE4</code>.
     */
    public final TableField<CntlRecord, Double> CNTL_VALUE4 = createField("CNTL_VALUE4", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>CNTL.CNTL_VALUE5</code>.
     */
    public final TableField<CntlRecord, Double> CNTL_VALUE5 = createField("CNTL_VALUE5", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>CNTL.CNTL_DATE</code>.
     */
    public final TableField<CntlRecord, Timestamp> CNTL_DATE = createField("CNTL_DATE", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>CNTL.CNTL_SDATE</code>.
     */
    public final TableField<CntlRecord, Timestamp> CNTL_SDATE = createField("CNTL_SDATE", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>CNTL.CNTL_VALUE6</code>.
     */
    public final TableField<CntlRecord, Double> CNTL_VALUE6 = createField("CNTL_VALUE6", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>CNTL.CNTL_VALUE7</code>.
     */
    public final TableField<CntlRecord, Double> CNTL_VALUE7 = createField("CNTL_VALUE7", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>CNTL.CNTL_VALUE8</code>.
     */
    public final TableField<CntlRecord, Double> CNTL_VALUE8 = createField("CNTL_VALUE8", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>CNTL.CNTL_VALUE9</code>.
     */
    public final TableField<CntlRecord, Double> CNTL_VALUE9 = createField("CNTL_VALUE9", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>CNTL.CNTL_VALUE10</code>.
     */
    public final TableField<CntlRecord, Double> CNTL_VALUE10 = createField("CNTL_VALUE10", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * Create a <code>CNTL</code> table reference
     */
    public Cntl() {
        this(DSL.name("CNTL"), null);
    }

    /**
     * Create an aliased <code>CNTL</code> table reference
     */
    public Cntl(String alias) {
        this(DSL.name(alias), CNTL);
    }

    /**
     * Create an aliased <code>CNTL</code> table reference
     */
    public Cntl(Name alias) {
        this(alias, CNTL);
    }

    private Cntl(Name alias, Table<CntlRecord> aliased) {
        this(alias, aliased, null);
    }

    private Cntl(Name alias, Table<CntlRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Cntl(Table<O> child, ForeignKey<O, CntlRecord> key) {
        super(child, key, CNTL);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CntlRecord> getPrimaryKey() {
        return Keys.INTEG_25;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CntlRecord>> getKeys() {
        return Arrays.<UniqueKey<CntlRecord>>asList(Keys.INTEG_25);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Cntl as(String alias) {
        return new Cntl(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Cntl as(Name alias) {
        return new Cntl(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Cntl rename(String name) {
        return new Cntl(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Cntl rename(Name name) {
        return new Cntl(name, null);
    }
}
