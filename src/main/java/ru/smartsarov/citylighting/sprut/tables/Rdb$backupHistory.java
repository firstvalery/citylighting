/*
 * This file is generated by jOOQ.
 */
package ru.smartsarov.citylighting.sprut.tables;


import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.smartsarov.citylighting.sprut.DefaultSchema;
import ru.smartsarov.citylighting.sprut.tables.records.Rdb$backupHistoryRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Rdb$backupHistory extends TableImpl<Rdb$backupHistoryRecord> {

    private static final long serialVersionUID = -1017191059;

    /**
     * The reference instance of <code>RDB$BACKUP_HISTORY</code>
     */
    public static final Rdb$backupHistory RDB$BACKUP_HISTORY = new Rdb$backupHistory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Rdb$backupHistoryRecord> getRecordType() {
        return Rdb$backupHistoryRecord.class;
    }

    /**
     * The column <code>RDB$BACKUP_HISTORY.RDB$BACKUP_ID</code>.
     */
    public final TableField<Rdb$backupHistoryRecord, Integer> RDB$BACKUP_ID = createField("RDB$BACKUP_ID", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>RDB$BACKUP_HISTORY.RDB$TIMESTAMP</code>.
     */
    public final TableField<Rdb$backupHistoryRecord, Timestamp> RDB$TIMESTAMP = createField("RDB$TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>RDB$BACKUP_HISTORY.RDB$BACKUP_LEVEL</code>.
     */
    public final TableField<Rdb$backupHistoryRecord, Integer> RDB$BACKUP_LEVEL = createField("RDB$BACKUP_LEVEL", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>RDB$BACKUP_HISTORY.RDB$GUID</code>.
     */
    public final TableField<Rdb$backupHistoryRecord, String> RDB$GUID = createField("RDB$GUID", org.jooq.impl.SQLDataType.CHAR, this, "");

    /**
     * The column <code>RDB$BACKUP_HISTORY.RDB$SCN</code>.
     */
    public final TableField<Rdb$backupHistoryRecord, Integer> RDB$SCN = createField("RDB$SCN", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>RDB$BACKUP_HISTORY.RDB$FILE_NAME</code>.
     */
    public final TableField<Rdb$backupHistoryRecord, String> RDB$FILE_NAME = createField("RDB$FILE_NAME", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>RDB$BACKUP_HISTORY</code> table reference
     */
    public Rdb$backupHistory() {
        this(DSL.name("RDB$BACKUP_HISTORY"), null);
    }

    /**
     * Create an aliased <code>RDB$BACKUP_HISTORY</code> table reference
     */
    public Rdb$backupHistory(String alias) {
        this(DSL.name(alias), RDB$BACKUP_HISTORY);
    }

    /**
     * Create an aliased <code>RDB$BACKUP_HISTORY</code> table reference
     */
    public Rdb$backupHistory(Name alias) {
        this(alias, RDB$BACKUP_HISTORY);
    }

    private Rdb$backupHistory(Name alias, Table<Rdb$backupHistoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private Rdb$backupHistory(Name alias, Table<Rdb$backupHistoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Rdb$backupHistory(Table<O> child, ForeignKey<O, Rdb$backupHistoryRecord> key) {
        super(child, key, RDB$BACKUP_HISTORY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rdb$backupHistory as(String alias) {
        return new Rdb$backupHistory(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rdb$backupHistory as(Name alias) {
        return new Rdb$backupHistory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Rdb$backupHistory rename(String name) {
        return new Rdb$backupHistory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Rdb$backupHistory rename(Name name) {
        return new Rdb$backupHistory(name, null);
    }
}
