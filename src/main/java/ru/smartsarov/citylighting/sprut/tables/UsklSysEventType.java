/*
 * This file is generated by jOOQ.
 */
package ru.smartsarov.citylighting.sprut.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.smartsarov.citylighting.sprut.DefaultSchema;
import ru.smartsarov.citylighting.sprut.Keys;
import ru.smartsarov.citylighting.sprut.tables.records.UsklSysEventTypeRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UsklSysEventType extends TableImpl<UsklSysEventTypeRecord> {

    private static final long serialVersionUID = -567951864;

    /**
     * The reference instance of <code>USKL_SYS_EVENT_TYPE</code>
     */
    public static final UsklSysEventType USKL_SYS_EVENT_TYPE = new UsklSysEventType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UsklSysEventTypeRecord> getRecordType() {
        return UsklSysEventTypeRecord.class;
    }

    /**
     * The column <code>USKL_SYS_EVENT_TYPE.USKLSE_ID</code>.
     */
    public final TableField<UsklSysEventTypeRecord, Integer> USKLSE_ID = createField("USKLSE_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>USKL_SYS_EVENT_TYPE.USKLSE_EVENT</code>.
     */
    public final TableField<UsklSysEventTypeRecord, String> USKLSE_EVENT = createField("USKLSE_EVENT", org.jooq.impl.SQLDataType.VARCHAR(250), this, "");

    /**
     * Create a <code>USKL_SYS_EVENT_TYPE</code> table reference
     */
    public UsklSysEventType() {
        this(DSL.name("USKL_SYS_EVENT_TYPE"), null);
    }

    /**
     * Create an aliased <code>USKL_SYS_EVENT_TYPE</code> table reference
     */
    public UsklSysEventType(String alias) {
        this(DSL.name(alias), USKL_SYS_EVENT_TYPE);
    }

    /**
     * Create an aliased <code>USKL_SYS_EVENT_TYPE</code> table reference
     */
    public UsklSysEventType(Name alias) {
        this(alias, USKL_SYS_EVENT_TYPE);
    }

    private UsklSysEventType(Name alias, Table<UsklSysEventTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private UsklSysEventType(Name alias, Table<UsklSysEventTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> UsklSysEventType(Table<O> child, ForeignKey<O, UsklSysEventTypeRecord> key) {
        super(child, key, USKL_SYS_EVENT_TYPE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UsklSysEventTypeRecord> getPrimaryKey() {
        return Keys.USKL_SYS_EVENT_TYPE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UsklSysEventTypeRecord>> getKeys() {
        return Arrays.<UniqueKey<UsklSysEventTypeRecord>>asList(Keys.USKL_SYS_EVENT_TYPE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UsklSysEventType as(String alias) {
        return new UsklSysEventType(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UsklSysEventType as(Name alias) {
        return new UsklSysEventType(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UsklSysEventType rename(String name) {
        return new UsklSysEventType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UsklSysEventType rename(Name name) {
        return new UsklSysEventType(name, null);
    }
}
