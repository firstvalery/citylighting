/*
 * This file is generated by jOOQ.
 */
package ru.smartsarov.citylighting.sprut.tables;


import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.smartsarov.citylighting.sprut.DefaultSchema;
import ru.smartsarov.citylighting.sprut.tables.records.Rdb$transactionsRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Rdb$transactions extends TableImpl<Rdb$transactionsRecord> {

    private static final long serialVersionUID = 1570549128;

    /**
     * The reference instance of <code>RDB$TRANSACTIONS</code>
     */
    public static final Rdb$transactions RDB$TRANSACTIONS = new Rdb$transactions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Rdb$transactionsRecord> getRecordType() {
        return Rdb$transactionsRecord.class;
    }

    /**
     * The column <code>RDB$TRANSACTIONS.RDB$TRANSACTION_ID</code>.
     */
    public final TableField<Rdb$transactionsRecord, Integer> RDB$TRANSACTION_ID = createField("RDB$TRANSACTION_ID", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>RDB$TRANSACTIONS.RDB$TRANSACTION_STATE</code>.
     */
    public final TableField<Rdb$transactionsRecord, Short> RDB$TRANSACTION_STATE = createField("RDB$TRANSACTION_STATE", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$TRANSACTIONS.RDB$TIMESTAMP</code>.
     */
    public final TableField<Rdb$transactionsRecord, Timestamp> RDB$TIMESTAMP = createField("RDB$TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>RDB$TRANSACTIONS.RDB$TRANSACTION_DESCRIPTION</code>.
     */
    public final TableField<Rdb$transactionsRecord, byte[]> RDB$TRANSACTION_DESCRIPTION = createField("RDB$TRANSACTION_DESCRIPTION", org.jooq.impl.SQLDataType.BLOB, this, "");

    /**
     * Create a <code>RDB$TRANSACTIONS</code> table reference
     */
    public Rdb$transactions() {
        this(DSL.name("RDB$TRANSACTIONS"), null);
    }

    /**
     * Create an aliased <code>RDB$TRANSACTIONS</code> table reference
     */
    public Rdb$transactions(String alias) {
        this(DSL.name(alias), RDB$TRANSACTIONS);
    }

    /**
     * Create an aliased <code>RDB$TRANSACTIONS</code> table reference
     */
    public Rdb$transactions(Name alias) {
        this(alias, RDB$TRANSACTIONS);
    }

    private Rdb$transactions(Name alias, Table<Rdb$transactionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Rdb$transactions(Name alias, Table<Rdb$transactionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Rdb$transactions(Table<O> child, ForeignKey<O, Rdb$transactionsRecord> key) {
        super(child, key, RDB$TRANSACTIONS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rdb$transactions as(String alias) {
        return new Rdb$transactions(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rdb$transactions as(Name alias) {
        return new Rdb$transactions(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Rdb$transactions rename(String name) {
        return new Rdb$transactions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Rdb$transactions rename(Name name) {
        return new Rdb$transactions(name, null);
    }
}
