/*
 * This file is generated by jOOQ.
 */
package ru.smartsarov.citylighting.sprut.tables;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.smartsarov.citylighting.sprut.DefaultSchema;
import ru.smartsarov.citylighting.sprut.tables.records.Rdb$fieldsRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Rdb$fields extends TableImpl<Rdb$fieldsRecord> {

    private static final long serialVersionUID = 1421423166;

    /**
     * The reference instance of <code>RDB$FIELDS</code>
     */
    public static final Rdb$fields RDB$FIELDS = new Rdb$fields();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Rdb$fieldsRecord> getRecordType() {
        return Rdb$fieldsRecord.class;
    }

    /**
     * The column <code>RDB$FIELDS.RDB$FIELD_NAME</code>.
     */
    public final TableField<Rdb$fieldsRecord, String> RDB$FIELD_NAME = createField("RDB$FIELD_NAME", org.jooq.impl.SQLDataType.CHAR, this, "");

    /**
     * The column <code>RDB$FIELDS.RDB$QUERY_NAME</code>.
     */
    public final TableField<Rdb$fieldsRecord, String> RDB$QUERY_NAME = createField("RDB$QUERY_NAME", org.jooq.impl.SQLDataType.CHAR, this, "");

    /**
     * The column <code>RDB$FIELDS.RDB$VALIDATION_BLR</code>.
     */
    public final TableField<Rdb$fieldsRecord, byte[]> RDB$VALIDATION_BLR = createField("RDB$VALIDATION_BLR", org.jooq.impl.SQLDataType.BLOB, this, "");

    /**
     * The column <code>RDB$FIELDS.RDB$VALIDATION_SOURCE</code>.
     */
    public final TableField<Rdb$fieldsRecord, String> RDB$VALIDATION_SOURCE = createField("RDB$VALIDATION_SOURCE", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>RDB$FIELDS.RDB$COMPUTED_BLR</code>.
     */
    public final TableField<Rdb$fieldsRecord, byte[]> RDB$COMPUTED_BLR = createField("RDB$COMPUTED_BLR", org.jooq.impl.SQLDataType.BLOB, this, "");

    /**
     * The column <code>RDB$FIELDS.RDB$COMPUTED_SOURCE</code>.
     */
    public final TableField<Rdb$fieldsRecord, String> RDB$COMPUTED_SOURCE = createField("RDB$COMPUTED_SOURCE", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>RDB$FIELDS.RDB$DEFAULT_VALUE</code>.
     */
    public final TableField<Rdb$fieldsRecord, byte[]> RDB$DEFAULT_VALUE = createField("RDB$DEFAULT_VALUE", org.jooq.impl.SQLDataType.BLOB, this, "");

    /**
     * The column <code>RDB$FIELDS.RDB$DEFAULT_SOURCE</code>.
     */
    public final TableField<Rdb$fieldsRecord, String> RDB$DEFAULT_SOURCE = createField("RDB$DEFAULT_SOURCE", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>RDB$FIELDS.RDB$FIELD_LENGTH</code>.
     */
    public final TableField<Rdb$fieldsRecord, Short> RDB$FIELD_LENGTH = createField("RDB$FIELD_LENGTH", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$FIELDS.RDB$FIELD_SCALE</code>.
     */
    public final TableField<Rdb$fieldsRecord, Short> RDB$FIELD_SCALE = createField("RDB$FIELD_SCALE", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$FIELDS.RDB$FIELD_TYPE</code>.
     */
    public final TableField<Rdb$fieldsRecord, Short> RDB$FIELD_TYPE = createField("RDB$FIELD_TYPE", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$FIELDS.RDB$FIELD_SUB_TYPE</code>.
     */
    public final TableField<Rdb$fieldsRecord, Short> RDB$FIELD_SUB_TYPE = createField("RDB$FIELD_SUB_TYPE", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$FIELDS.RDB$MISSING_VALUE</code>.
     */
    public final TableField<Rdb$fieldsRecord, byte[]> RDB$MISSING_VALUE = createField("RDB$MISSING_VALUE", org.jooq.impl.SQLDataType.BLOB, this, "");

    /**
     * The column <code>RDB$FIELDS.RDB$MISSING_SOURCE</code>.
     */
    public final TableField<Rdb$fieldsRecord, String> RDB$MISSING_SOURCE = createField("RDB$MISSING_SOURCE", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>RDB$FIELDS.RDB$DESCRIPTION</code>.
     */
    public final TableField<Rdb$fieldsRecord, String> RDB$DESCRIPTION = createField("RDB$DESCRIPTION", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>RDB$FIELDS.RDB$SYSTEM_FLAG</code>.
     */
    public final TableField<Rdb$fieldsRecord, Short> RDB$SYSTEM_FLAG = createField("RDB$SYSTEM_FLAG", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$FIELDS.RDB$QUERY_HEADER</code>.
     */
    public final TableField<Rdb$fieldsRecord, String> RDB$QUERY_HEADER = createField("RDB$QUERY_HEADER", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>RDB$FIELDS.RDB$SEGMENT_LENGTH</code>.
     */
    public final TableField<Rdb$fieldsRecord, Short> RDB$SEGMENT_LENGTH = createField("RDB$SEGMENT_LENGTH", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$FIELDS.RDB$EDIT_STRING</code>.
     */
    public final TableField<Rdb$fieldsRecord, String> RDB$EDIT_STRING = createField("RDB$EDIT_STRING", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>RDB$FIELDS.RDB$EXTERNAL_LENGTH</code>.
     */
    public final TableField<Rdb$fieldsRecord, Short> RDB$EXTERNAL_LENGTH = createField("RDB$EXTERNAL_LENGTH", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$FIELDS.RDB$EXTERNAL_SCALE</code>.
     */
    public final TableField<Rdb$fieldsRecord, Short> RDB$EXTERNAL_SCALE = createField("RDB$EXTERNAL_SCALE", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$FIELDS.RDB$EXTERNAL_TYPE</code>.
     */
    public final TableField<Rdb$fieldsRecord, Short> RDB$EXTERNAL_TYPE = createField("RDB$EXTERNAL_TYPE", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$FIELDS.RDB$DIMENSIONS</code>.
     */
    public final TableField<Rdb$fieldsRecord, Short> RDB$DIMENSIONS = createField("RDB$DIMENSIONS", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$FIELDS.RDB$NULL_FLAG</code>.
     */
    public final TableField<Rdb$fieldsRecord, Short> RDB$NULL_FLAG = createField("RDB$NULL_FLAG", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$FIELDS.RDB$CHARACTER_LENGTH</code>.
     */
    public final TableField<Rdb$fieldsRecord, Short> RDB$CHARACTER_LENGTH = createField("RDB$CHARACTER_LENGTH", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$FIELDS.RDB$COLLATION_ID</code>.
     */
    public final TableField<Rdb$fieldsRecord, Short> RDB$COLLATION_ID = createField("RDB$COLLATION_ID", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$FIELDS.RDB$CHARACTER_SET_ID</code>.
     */
    public final TableField<Rdb$fieldsRecord, Short> RDB$CHARACTER_SET_ID = createField("RDB$CHARACTER_SET_ID", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$FIELDS.RDB$FIELD_PRECISION</code>.
     */
    public final TableField<Rdb$fieldsRecord, Short> RDB$FIELD_PRECISION = createField("RDB$FIELD_PRECISION", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * Create a <code>RDB$FIELDS</code> table reference
     */
    public Rdb$fields() {
        this(DSL.name("RDB$FIELDS"), null);
    }

    /**
     * Create an aliased <code>RDB$FIELDS</code> table reference
     */
    public Rdb$fields(String alias) {
        this(DSL.name(alias), RDB$FIELDS);
    }

    /**
     * Create an aliased <code>RDB$FIELDS</code> table reference
     */
    public Rdb$fields(Name alias) {
        this(alias, RDB$FIELDS);
    }

    private Rdb$fields(Name alias, Table<Rdb$fieldsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Rdb$fields(Name alias, Table<Rdb$fieldsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Rdb$fields(Table<O> child, ForeignKey<O, Rdb$fieldsRecord> key) {
        super(child, key, RDB$FIELDS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rdb$fields as(String alias) {
        return new Rdb$fields(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rdb$fields as(Name alias) {
        return new Rdb$fields(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Rdb$fields rename(String name) {
        return new Rdb$fields(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Rdb$fields rename(Name name) {
        return new Rdb$fields(name, null);
    }
}
