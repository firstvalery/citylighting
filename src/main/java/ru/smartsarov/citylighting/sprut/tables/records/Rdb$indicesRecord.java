/*
 * This file is generated by jOOQ.
 */
package ru.smartsarov.citylighting.sprut.tables.records;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record13;
import org.jooq.Row13;
import org.jooq.impl.TableRecordImpl;

import ru.smartsarov.citylighting.sprut.tables.Rdb$indices;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Rdb$indicesRecord extends TableRecordImpl<Rdb$indicesRecord> implements Record13<String, String, Short, Short, String, Short, Short, Short, String, Short, byte[], String, Double> {

    private static final long serialVersionUID = 706512553;

    /**
     * Setter for <code>RDB$INDICES.RDB$INDEX_NAME</code>.
     */
    public void setRdb$indexName(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>RDB$INDICES.RDB$INDEX_NAME</code>.
     */
    public String getRdb$indexName() {
        return (String) get(0);
    }

    /**
     * Setter for <code>RDB$INDICES.RDB$RELATION_NAME</code>.
     */
    public void setRdb$relationName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>RDB$INDICES.RDB$RELATION_NAME</code>.
     */
    public String getRdb$relationName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>RDB$INDICES.RDB$INDEX_ID</code>.
     */
    public void setRdb$indexId(Short value) {
        set(2, value);
    }

    /**
     * Getter for <code>RDB$INDICES.RDB$INDEX_ID</code>.
     */
    public Short getRdb$indexId() {
        return (Short) get(2);
    }

    /**
     * Setter for <code>RDB$INDICES.RDB$UNIQUE_FLAG</code>.
     */
    public void setRdb$uniqueFlag(Short value) {
        set(3, value);
    }

    /**
     * Getter for <code>RDB$INDICES.RDB$UNIQUE_FLAG</code>.
     */
    public Short getRdb$uniqueFlag() {
        return (Short) get(3);
    }

    /**
     * Setter for <code>RDB$INDICES.RDB$DESCRIPTION</code>.
     */
    public void setRdb$description(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>RDB$INDICES.RDB$DESCRIPTION</code>.
     */
    public String getRdb$description() {
        return (String) get(4);
    }

    /**
     * Setter for <code>RDB$INDICES.RDB$SEGMENT_COUNT</code>.
     */
    public void setRdb$segmentCount(Short value) {
        set(5, value);
    }

    /**
     * Getter for <code>RDB$INDICES.RDB$SEGMENT_COUNT</code>.
     */
    public Short getRdb$segmentCount() {
        return (Short) get(5);
    }

    /**
     * Setter for <code>RDB$INDICES.RDB$INDEX_INACTIVE</code>.
     */
    public void setRdb$indexInactive(Short value) {
        set(6, value);
    }

    /**
     * Getter for <code>RDB$INDICES.RDB$INDEX_INACTIVE</code>.
     */
    public Short getRdb$indexInactive() {
        return (Short) get(6);
    }

    /**
     * Setter for <code>RDB$INDICES.RDB$INDEX_TYPE</code>.
     */
    public void setRdb$indexType(Short value) {
        set(7, value);
    }

    /**
     * Getter for <code>RDB$INDICES.RDB$INDEX_TYPE</code>.
     */
    public Short getRdb$indexType() {
        return (Short) get(7);
    }

    /**
     * Setter for <code>RDB$INDICES.RDB$FOREIGN_KEY</code>.
     */
    public void setRdb$foreignKey(String value) {
        set(8, value);
    }

    /**
     * Getter for <code>RDB$INDICES.RDB$FOREIGN_KEY</code>.
     */
    public String getRdb$foreignKey() {
        return (String) get(8);
    }

    /**
     * Setter for <code>RDB$INDICES.RDB$SYSTEM_FLAG</code>.
     */
    public void setRdb$systemFlag(Short value) {
        set(9, value);
    }

    /**
     * Getter for <code>RDB$INDICES.RDB$SYSTEM_FLAG</code>.
     */
    public Short getRdb$systemFlag() {
        return (Short) get(9);
    }

    /**
     * Setter for <code>RDB$INDICES.RDB$EXPRESSION_BLR</code>.
     */
    public void setRdb$expressionBlr(byte... value) {
        set(10, value);
    }

    /**
     * Getter for <code>RDB$INDICES.RDB$EXPRESSION_BLR</code>.
     */
    public byte[] getRdb$expressionBlr() {
        return (byte[]) get(10);
    }

    /**
     * Setter for <code>RDB$INDICES.RDB$EXPRESSION_SOURCE</code>.
     */
    public void setRdb$expressionSource(String value) {
        set(11, value);
    }

    /**
     * Getter for <code>RDB$INDICES.RDB$EXPRESSION_SOURCE</code>.
     */
    public String getRdb$expressionSource() {
        return (String) get(11);
    }

    /**
     * Setter for <code>RDB$INDICES.RDB$STATISTICS</code>.
     */
    public void setRdb$statistics(Double value) {
        set(12, value);
    }

    /**
     * Getter for <code>RDB$INDICES.RDB$STATISTICS</code>.
     */
    public Double getRdb$statistics() {
        return (Double) get(12);
    }

    // -------------------------------------------------------------------------
    // Record13 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row13<String, String, Short, Short, String, Short, Short, Short, String, Short, byte[], String, Double> fieldsRow() {
        return (Row13) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row13<String, String, Short, Short, String, Short, Short, Short, String, Short, byte[], String, Double> valuesRow() {
        return (Row13) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field1() {
        return Rdb$indices.RDB$INDICES.RDB$INDEX_NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return Rdb$indices.RDB$INDICES.RDB$RELATION_NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Short> field3() {
        return Rdb$indices.RDB$INDICES.RDB$INDEX_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Short> field4() {
        return Rdb$indices.RDB$INDICES.RDB$UNIQUE_FLAG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field5() {
        return Rdb$indices.RDB$INDICES.RDB$DESCRIPTION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Short> field6() {
        return Rdb$indices.RDB$INDICES.RDB$SEGMENT_COUNT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Short> field7() {
        return Rdb$indices.RDB$INDICES.RDB$INDEX_INACTIVE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Short> field8() {
        return Rdb$indices.RDB$INDICES.RDB$INDEX_TYPE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field9() {
        return Rdb$indices.RDB$INDICES.RDB$FOREIGN_KEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Short> field10() {
        return Rdb$indices.RDB$INDICES.RDB$SYSTEM_FLAG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<byte[]> field11() {
        return Rdb$indices.RDB$INDICES.RDB$EXPRESSION_BLR;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field12() {
        return Rdb$indices.RDB$INDICES.RDB$EXPRESSION_SOURCE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Double> field13() {
        return Rdb$indices.RDB$INDICES.RDB$STATISTICS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component1() {
        return getRdb$indexName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component2() {
        return getRdb$relationName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short component3() {
        return getRdb$indexId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short component4() {
        return getRdb$uniqueFlag();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component5() {
        return getRdb$description();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short component6() {
        return getRdb$segmentCount();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short component7() {
        return getRdb$indexInactive();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short component8() {
        return getRdb$indexType();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component9() {
        return getRdb$foreignKey();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short component10() {
        return getRdb$systemFlag();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public byte[] component11() {
        return getRdb$expressionBlr();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component12() {
        return getRdb$expressionSource();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double component13() {
        return getRdb$statistics();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value1() {
        return getRdb$indexName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getRdb$relationName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short value3() {
        return getRdb$indexId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short value4() {
        return getRdb$uniqueFlag();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value5() {
        return getRdb$description();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short value6() {
        return getRdb$segmentCount();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short value7() {
        return getRdb$indexInactive();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short value8() {
        return getRdb$indexType();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value9() {
        return getRdb$foreignKey();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short value10() {
        return getRdb$systemFlag();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public byte[] value11() {
        return getRdb$expressionBlr();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value12() {
        return getRdb$expressionSource();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double value13() {
        return getRdb$statistics();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rdb$indicesRecord value1(String value) {
        setRdb$indexName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rdb$indicesRecord value2(String value) {
        setRdb$relationName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rdb$indicesRecord value3(Short value) {
        setRdb$indexId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rdb$indicesRecord value4(Short value) {
        setRdb$uniqueFlag(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rdb$indicesRecord value5(String value) {
        setRdb$description(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rdb$indicesRecord value6(Short value) {
        setRdb$segmentCount(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rdb$indicesRecord value7(Short value) {
        setRdb$indexInactive(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rdb$indicesRecord value8(Short value) {
        setRdb$indexType(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rdb$indicesRecord value9(String value) {
        setRdb$foreignKey(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rdb$indicesRecord value10(Short value) {
        setRdb$systemFlag(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rdb$indicesRecord value11(byte... value) {
        setRdb$expressionBlr(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rdb$indicesRecord value12(String value) {
        setRdb$expressionSource(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rdb$indicesRecord value13(Double value) {
        setRdb$statistics(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rdb$indicesRecord values(String value1, String value2, Short value3, Short value4, String value5, Short value6, Short value7, Short value8, String value9, Short value10, byte[] value11, String value12, Double value13) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached Rdb$indicesRecord
     */
    public Rdb$indicesRecord() {
        super(Rdb$indices.RDB$INDICES);
    }

    /**
     * Create a detached, initialised Rdb$indicesRecord
     */
    public Rdb$indicesRecord(String rdb$indexName, String rdb$relationName, Short rdb$indexId, Short rdb$uniqueFlag, String rdb$description, Short rdb$segmentCount, Short rdb$indexInactive, Short rdb$indexType, String rdb$foreignKey, Short rdb$systemFlag, byte[] rdb$expressionBlr, String rdb$expressionSource, Double rdb$statistics) {
        super(Rdb$indices.RDB$INDICES);

        set(0, rdb$indexName);
        set(1, rdb$relationName);
        set(2, rdb$indexId);
        set(3, rdb$uniqueFlag);
        set(4, rdb$description);
        set(5, rdb$segmentCount);
        set(6, rdb$indexInactive);
        set(7, rdb$indexType);
        set(8, rdb$foreignKey);
        set(9, rdb$systemFlag);
        set(10, rdb$expressionBlr);
        set(11, rdb$expressionSource);
        set(12, rdb$statistics);
    }
}
