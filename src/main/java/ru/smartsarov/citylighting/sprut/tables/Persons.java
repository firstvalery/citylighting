/*
 * This file is generated by jOOQ.
 */
package ru.smartsarov.citylighting.sprut.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.smartsarov.citylighting.sprut.DefaultSchema;
import ru.smartsarov.citylighting.sprut.Keys;
import ru.smartsarov.citylighting.sprut.tables.records.PersonsRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Persons extends TableImpl<PersonsRecord> {

    private static final long serialVersionUID = 245065075;

    /**
     * The reference instance of <code>PERSONS</code>
     */
    public static final Persons PERSONS = new Persons();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PersonsRecord> getRecordType() {
        return PersonsRecord.class;
    }

    /**
     * The column <code>PERSONS.PRS_ID</code>.
     */
    public final TableField<PersonsRecord, Integer> PRS_ID = createField("PRS_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>PERSONS.PRS_AB_ID</code>.
     */
    public final TableField<PersonsRecord, Integer> PRS_AB_ID = createField("PRS_AB_ID", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>PERSONS.PRS_NAME</code>.
     */
    public final TableField<PersonsRecord, String> PRS_NAME = createField("PRS_NAME", org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>PERSONS.PRS_NAME1</code>.
     */
    public final TableField<PersonsRecord, String> PRS_NAME1 = createField("PRS_NAME1", org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>PERSONS.PRS_NAME2</code>.
     */
    public final TableField<PersonsRecord, String> PRS_NAME2 = createField("PRS_NAME2", org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>PERSONS.PRS_PHONEH</code>.
     */
    public final TableField<PersonsRecord, String> PRS_PHONEH = createField("PRS_PHONEH", org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>PERSONS.PRS_PHONEW</code>.
     */
    public final TableField<PersonsRecord, String> PRS_PHONEW = createField("PRS_PHONEW", org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>PERSONS.PRS_PHONEM</code>.
     */
    public final TableField<PersonsRecord, String> PRS_PHONEM = createField("PRS_PHONEM", org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>PERSONS.PRS_PHOTO</code>.
     */
    public final TableField<PersonsRecord, byte[]> PRS_PHOTO = createField("PRS_PHOTO", org.jooq.impl.SQLDataType.BLOB, this, "");

    /**
     * The column <code>PERSONS.PRS_MEMO</code>.
     */
    public final TableField<PersonsRecord, String> PRS_MEMO = createField("PRS_MEMO", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * Create a <code>PERSONS</code> table reference
     */
    public Persons() {
        this(DSL.name("PERSONS"), null);
    }

    /**
     * Create an aliased <code>PERSONS</code> table reference
     */
    public Persons(String alias) {
        this(DSL.name(alias), PERSONS);
    }

    /**
     * Create an aliased <code>PERSONS</code> table reference
     */
    public Persons(Name alias) {
        this(alias, PERSONS);
    }

    private Persons(Name alias, Table<PersonsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Persons(Name alias, Table<PersonsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Persons(Table<O> child, ForeignKey<O, PersonsRecord> key) {
        super(child, key, PERSONS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PersonsRecord> getPrimaryKey() {
        return Keys.INTEG_91;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PersonsRecord>> getKeys() {
        return Arrays.<UniqueKey<PersonsRecord>>asList(Keys.INTEG_91);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Persons as(String alias) {
        return new Persons(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Persons as(Name alias) {
        return new Persons(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Persons rename(String name) {
        return new Persons(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Persons rename(Name name) {
        return new Persons(name, null);
    }
}
