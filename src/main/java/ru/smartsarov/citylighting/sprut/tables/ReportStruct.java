/*
 * This file is generated by jOOQ.
 */
package ru.smartsarov.citylighting.sprut.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.smartsarov.citylighting.sprut.DefaultSchema;
import ru.smartsarov.citylighting.sprut.Keys;
import ru.smartsarov.citylighting.sprut.tables.records.ReportStructRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ReportStruct extends TableImpl<ReportStructRecord> {

    private static final long serialVersionUID = 1380553835;

    /**
     * The reference instance of <code>REPORT_STRUCT</code>
     */
    public static final ReportStruct REPORT_STRUCT = new ReportStruct();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ReportStructRecord> getRecordType() {
        return ReportStructRecord.class;
    }

    /**
     * The column <code>REPORT_STRUCT.STRUCT_ID</code>.
     */
    public final TableField<ReportStructRecord, Integer> STRUCT_ID = createField("STRUCT_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>REPORT_STRUCT.STRUCT_PARENT_ID</code>.
     */
    public final TableField<ReportStructRecord, Integer> STRUCT_PARENT_ID = createField("STRUCT_PARENT_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>REPORT_STRUCT.STRUCT_VER</code>.
     */
    public final TableField<ReportStructRecord, Integer> STRUCT_VER = createField("STRUCT_VER", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>REPORT_STRUCT.STRUCT_TYPE</code>.
     */
    public final TableField<ReportStructRecord, Integer> STRUCT_TYPE = createField("STRUCT_TYPE", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>REPORT_STRUCT.STRUCT_NAME</code>.
     */
    public final TableField<ReportStructRecord, String> STRUCT_NAME = createField("STRUCT_NAME", org.jooq.impl.SQLDataType.VARCHAR(250).nullable(false), this, "");

    /**
     * The column <code>REPORT_STRUCT.REPORT_DATA_ID</code>.
     */
    public final TableField<ReportStructRecord, Integer> REPORT_DATA_ID = createField("REPORT_DATA_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>REPORT_STRUCT.AB_ID</code>.
     */
    public final TableField<ReportStructRecord, Integer> AB_ID = createField("AB_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>REPORT_STRUCT.ACCESS_TYPE</code>.
     */
    public final TableField<ReportStructRecord, Integer> ACCESS_TYPE = createField("ACCESS_TYPE", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>REPORT_STRUCT.PROGTECH</code>.
     */
    public final TableField<ReportStructRecord, Short> PROGTECH = createField("PROGTECH", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * Create a <code>REPORT_STRUCT</code> table reference
     */
    public ReportStruct() {
        this(DSL.name("REPORT_STRUCT"), null);
    }

    /**
     * Create an aliased <code>REPORT_STRUCT</code> table reference
     */
    public ReportStruct(String alias) {
        this(DSL.name(alias), REPORT_STRUCT);
    }

    /**
     * Create an aliased <code>REPORT_STRUCT</code> table reference
     */
    public ReportStruct(Name alias) {
        this(alias, REPORT_STRUCT);
    }

    private ReportStruct(Name alias, Table<ReportStructRecord> aliased) {
        this(alias, aliased, null);
    }

    private ReportStruct(Name alias, Table<ReportStructRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ReportStruct(Table<O> child, ForeignKey<O, ReportStructRecord> key) {
        super(child, key, REPORT_STRUCT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ReportStructRecord> getPrimaryKey() {
        return Keys.PK_REPORT_STRUCT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ReportStructRecord>> getKeys() {
        return Arrays.<UniqueKey<ReportStructRecord>>asList(Keys.PK_REPORT_STRUCT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ReportStruct as(String alias) {
        return new ReportStruct(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ReportStruct as(Name alias) {
        return new ReportStruct(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ReportStruct rename(String name) {
        return new ReportStruct(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ReportStruct rename(Name name) {
        return new ReportStruct(name, null);
    }
}
