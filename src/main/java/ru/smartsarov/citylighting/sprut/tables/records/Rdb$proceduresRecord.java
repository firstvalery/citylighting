/*
 * This file is generated by jOOQ.
 */
package ru.smartsarov.citylighting.sprut.tables.records;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record14;
import org.jooq.Row14;
import org.jooq.impl.TableRecordImpl;

import ru.smartsarov.citylighting.sprut.tables.Rdb$procedures;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Rdb$proceduresRecord extends TableRecordImpl<Rdb$proceduresRecord> implements Record14<String, Short, Short, Short, String, String, byte[], String, String, byte[], Short, Short, Short, byte[]> {

    private static final long serialVersionUID = -1616467302;

    /**
     * Setter for <code>RDB$PROCEDURES.RDB$PROCEDURE_NAME</code>.
     */
    public void setRdb$procedureName(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>RDB$PROCEDURES.RDB$PROCEDURE_NAME</code>.
     */
    public String getRdb$procedureName() {
        return (String) get(0);
    }

    /**
     * Setter for <code>RDB$PROCEDURES.RDB$PROCEDURE_ID</code>.
     */
    public void setRdb$procedureId(Short value) {
        set(1, value);
    }

    /**
     * Getter for <code>RDB$PROCEDURES.RDB$PROCEDURE_ID</code>.
     */
    public Short getRdb$procedureId() {
        return (Short) get(1);
    }

    /**
     * Setter for <code>RDB$PROCEDURES.RDB$PROCEDURE_INPUTS</code>.
     */
    public void setRdb$procedureInputs(Short value) {
        set(2, value);
    }

    /**
     * Getter for <code>RDB$PROCEDURES.RDB$PROCEDURE_INPUTS</code>.
     */
    public Short getRdb$procedureInputs() {
        return (Short) get(2);
    }

    /**
     * Setter for <code>RDB$PROCEDURES.RDB$PROCEDURE_OUTPUTS</code>.
     */
    public void setRdb$procedureOutputs(Short value) {
        set(3, value);
    }

    /**
     * Getter for <code>RDB$PROCEDURES.RDB$PROCEDURE_OUTPUTS</code>.
     */
    public Short getRdb$procedureOutputs() {
        return (Short) get(3);
    }

    /**
     * Setter for <code>RDB$PROCEDURES.RDB$DESCRIPTION</code>.
     */
    public void setRdb$description(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>RDB$PROCEDURES.RDB$DESCRIPTION</code>.
     */
    public String getRdb$description() {
        return (String) get(4);
    }

    /**
     * Setter for <code>RDB$PROCEDURES.RDB$PROCEDURE_SOURCE</code>.
     */
    public void setRdb$procedureSource(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>RDB$PROCEDURES.RDB$PROCEDURE_SOURCE</code>.
     */
    public String getRdb$procedureSource() {
        return (String) get(5);
    }

    /**
     * Setter for <code>RDB$PROCEDURES.RDB$PROCEDURE_BLR</code>.
     */
    public void setRdb$procedureBlr(byte... value) {
        set(6, value);
    }

    /**
     * Getter for <code>RDB$PROCEDURES.RDB$PROCEDURE_BLR</code>.
     */
    public byte[] getRdb$procedureBlr() {
        return (byte[]) get(6);
    }

    /**
     * Setter for <code>RDB$PROCEDURES.RDB$SECURITY_CLASS</code>.
     */
    public void setRdb$securityClass(String value) {
        set(7, value);
    }

    /**
     * Getter for <code>RDB$PROCEDURES.RDB$SECURITY_CLASS</code>.
     */
    public String getRdb$securityClass() {
        return (String) get(7);
    }

    /**
     * Setter for <code>RDB$PROCEDURES.RDB$OWNER_NAME</code>.
     */
    public void setRdb$ownerName(String value) {
        set(8, value);
    }

    /**
     * Getter for <code>RDB$PROCEDURES.RDB$OWNER_NAME</code>.
     */
    public String getRdb$ownerName() {
        return (String) get(8);
    }

    /**
     * Setter for <code>RDB$PROCEDURES.RDB$RUNTIME</code>.
     */
    public void setRdb$runtime(byte... value) {
        set(9, value);
    }

    /**
     * Getter for <code>RDB$PROCEDURES.RDB$RUNTIME</code>.
     */
    public byte[] getRdb$runtime() {
        return (byte[]) get(9);
    }

    /**
     * Setter for <code>RDB$PROCEDURES.RDB$SYSTEM_FLAG</code>.
     */
    public void setRdb$systemFlag(Short value) {
        set(10, value);
    }

    /**
     * Getter for <code>RDB$PROCEDURES.RDB$SYSTEM_FLAG</code>.
     */
    public Short getRdb$systemFlag() {
        return (Short) get(10);
    }

    /**
     * Setter for <code>RDB$PROCEDURES.RDB$PROCEDURE_TYPE</code>.
     */
    public void setRdb$procedureType(Short value) {
        set(11, value);
    }

    /**
     * Getter for <code>RDB$PROCEDURES.RDB$PROCEDURE_TYPE</code>.
     */
    public Short getRdb$procedureType() {
        return (Short) get(11);
    }

    /**
     * Setter for <code>RDB$PROCEDURES.RDB$VALID_BLR</code>.
     */
    public void setRdb$validBlr(Short value) {
        set(12, value);
    }

    /**
     * Getter for <code>RDB$PROCEDURES.RDB$VALID_BLR</code>.
     */
    public Short getRdb$validBlr() {
        return (Short) get(12);
    }

    /**
     * Setter for <code>RDB$PROCEDURES.RDB$DEBUG_INFO</code>.
     */
    public void setRdb$debugInfo(byte... value) {
        set(13, value);
    }

    /**
     * Getter for <code>RDB$PROCEDURES.RDB$DEBUG_INFO</code>.
     */
    public byte[] getRdb$debugInfo() {
        return (byte[]) get(13);
    }

    // -------------------------------------------------------------------------
    // Record14 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row14<String, Short, Short, Short, String, String, byte[], String, String, byte[], Short, Short, Short, byte[]> fieldsRow() {
        return (Row14) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row14<String, Short, Short, Short, String, String, byte[], String, String, byte[], Short, Short, Short, byte[]> valuesRow() {
        return (Row14) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field1() {
        return Rdb$procedures.RDB$PROCEDURES.RDB$PROCEDURE_NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Short> field2() {
        return Rdb$procedures.RDB$PROCEDURES.RDB$PROCEDURE_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Short> field3() {
        return Rdb$procedures.RDB$PROCEDURES.RDB$PROCEDURE_INPUTS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Short> field4() {
        return Rdb$procedures.RDB$PROCEDURES.RDB$PROCEDURE_OUTPUTS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field5() {
        return Rdb$procedures.RDB$PROCEDURES.RDB$DESCRIPTION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field6() {
        return Rdb$procedures.RDB$PROCEDURES.RDB$PROCEDURE_SOURCE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<byte[]> field7() {
        return Rdb$procedures.RDB$PROCEDURES.RDB$PROCEDURE_BLR;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field8() {
        return Rdb$procedures.RDB$PROCEDURES.RDB$SECURITY_CLASS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field9() {
        return Rdb$procedures.RDB$PROCEDURES.RDB$OWNER_NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<byte[]> field10() {
        return Rdb$procedures.RDB$PROCEDURES.RDB$RUNTIME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Short> field11() {
        return Rdb$procedures.RDB$PROCEDURES.RDB$SYSTEM_FLAG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Short> field12() {
        return Rdb$procedures.RDB$PROCEDURES.RDB$PROCEDURE_TYPE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Short> field13() {
        return Rdb$procedures.RDB$PROCEDURES.RDB$VALID_BLR;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<byte[]> field14() {
        return Rdb$procedures.RDB$PROCEDURES.RDB$DEBUG_INFO;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component1() {
        return getRdb$procedureName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short component2() {
        return getRdb$procedureId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short component3() {
        return getRdb$procedureInputs();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short component4() {
        return getRdb$procedureOutputs();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component5() {
        return getRdb$description();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component6() {
        return getRdb$procedureSource();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public byte[] component7() {
        return getRdb$procedureBlr();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component8() {
        return getRdb$securityClass();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component9() {
        return getRdb$ownerName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public byte[] component10() {
        return getRdb$runtime();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short component11() {
        return getRdb$systemFlag();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short component12() {
        return getRdb$procedureType();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short component13() {
        return getRdb$validBlr();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public byte[] component14() {
        return getRdb$debugInfo();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value1() {
        return getRdb$procedureName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short value2() {
        return getRdb$procedureId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short value3() {
        return getRdb$procedureInputs();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short value4() {
        return getRdb$procedureOutputs();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value5() {
        return getRdb$description();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value6() {
        return getRdb$procedureSource();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public byte[] value7() {
        return getRdb$procedureBlr();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value8() {
        return getRdb$securityClass();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value9() {
        return getRdb$ownerName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public byte[] value10() {
        return getRdb$runtime();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short value11() {
        return getRdb$systemFlag();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short value12() {
        return getRdb$procedureType();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short value13() {
        return getRdb$validBlr();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public byte[] value14() {
        return getRdb$debugInfo();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rdb$proceduresRecord value1(String value) {
        setRdb$procedureName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rdb$proceduresRecord value2(Short value) {
        setRdb$procedureId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rdb$proceduresRecord value3(Short value) {
        setRdb$procedureInputs(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rdb$proceduresRecord value4(Short value) {
        setRdb$procedureOutputs(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rdb$proceduresRecord value5(String value) {
        setRdb$description(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rdb$proceduresRecord value6(String value) {
        setRdb$procedureSource(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rdb$proceduresRecord value7(byte... value) {
        setRdb$procedureBlr(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rdb$proceduresRecord value8(String value) {
        setRdb$securityClass(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rdb$proceduresRecord value9(String value) {
        setRdb$ownerName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rdb$proceduresRecord value10(byte... value) {
        setRdb$runtime(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rdb$proceduresRecord value11(Short value) {
        setRdb$systemFlag(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rdb$proceduresRecord value12(Short value) {
        setRdb$procedureType(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rdb$proceduresRecord value13(Short value) {
        setRdb$validBlr(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rdb$proceduresRecord value14(byte... value) {
        setRdb$debugInfo(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rdb$proceduresRecord values(String value1, Short value2, Short value3, Short value4, String value5, String value6, byte[] value7, String value8, String value9, byte[] value10, Short value11, Short value12, Short value13, byte[] value14) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached Rdb$proceduresRecord
     */
    public Rdb$proceduresRecord() {
        super(Rdb$procedures.RDB$PROCEDURES);
    }

    /**
     * Create a detached, initialised Rdb$proceduresRecord
     */
    public Rdb$proceduresRecord(String rdb$procedureName, Short rdb$procedureId, Short rdb$procedureInputs, Short rdb$procedureOutputs, String rdb$description, String rdb$procedureSource, byte[] rdb$procedureBlr, String rdb$securityClass, String rdb$ownerName, byte[] rdb$runtime, Short rdb$systemFlag, Short rdb$procedureType, Short rdb$validBlr, byte[] rdb$debugInfo) {
        super(Rdb$procedures.RDB$PROCEDURES);

        set(0, rdb$procedureName);
        set(1, rdb$procedureId);
        set(2, rdb$procedureInputs);
        set(3, rdb$procedureOutputs);
        set(4, rdb$description);
        set(5, rdb$procedureSource);
        set(6, rdb$procedureBlr);
        set(7, rdb$securityClass);
        set(8, rdb$ownerName);
        set(9, rdb$runtime);
        set(10, rdb$systemFlag);
        set(11, rdb$procedureType);
        set(12, rdb$validBlr);
        set(13, rdb$debugInfo);
    }
}
