/*
 * This file is generated by jOOQ.
 */
package ru.smartsarov.citylighting.sprut.tables;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.smartsarov.citylighting.sprut.DefaultSchema;
import ru.smartsarov.citylighting.sprut.tables.records.Rdb$rolesRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Rdb$roles extends TableImpl<Rdb$rolesRecord> {

    private static final long serialVersionUID = -948416284;

    /**
     * The reference instance of <code>RDB$ROLES</code>
     */
    public static final Rdb$roles RDB$ROLES = new Rdb$roles();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Rdb$rolesRecord> getRecordType() {
        return Rdb$rolesRecord.class;
    }

    /**
     * The column <code>RDB$ROLES.RDB$ROLE_NAME</code>.
     */
    public final TableField<Rdb$rolesRecord, String> RDB$ROLE_NAME = createField("RDB$ROLE_NAME", org.jooq.impl.SQLDataType.CHAR, this, "");

    /**
     * The column <code>RDB$ROLES.RDB$OWNER_NAME</code>.
     */
    public final TableField<Rdb$rolesRecord, String> RDB$OWNER_NAME = createField("RDB$OWNER_NAME", org.jooq.impl.SQLDataType.CHAR, this, "");

    /**
     * The column <code>RDB$ROLES.RDB$DESCRIPTION</code>.
     */
    public final TableField<Rdb$rolesRecord, String> RDB$DESCRIPTION = createField("RDB$DESCRIPTION", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>RDB$ROLES.RDB$SYSTEM_FLAG</code>.
     */
    public final TableField<Rdb$rolesRecord, Short> RDB$SYSTEM_FLAG = createField("RDB$SYSTEM_FLAG", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * Create a <code>RDB$ROLES</code> table reference
     */
    public Rdb$roles() {
        this(DSL.name("RDB$ROLES"), null);
    }

    /**
     * Create an aliased <code>RDB$ROLES</code> table reference
     */
    public Rdb$roles(String alias) {
        this(DSL.name(alias), RDB$ROLES);
    }

    /**
     * Create an aliased <code>RDB$ROLES</code> table reference
     */
    public Rdb$roles(Name alias) {
        this(alias, RDB$ROLES);
    }

    private Rdb$roles(Name alias, Table<Rdb$rolesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Rdb$roles(Name alias, Table<Rdb$rolesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Rdb$roles(Table<O> child, ForeignKey<O, Rdb$rolesRecord> key) {
        super(child, key, RDB$ROLES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rdb$roles as(String alias) {
        return new Rdb$roles(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rdb$roles as(Name alias) {
        return new Rdb$roles(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Rdb$roles rename(String name) {
        return new Rdb$roles(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Rdb$roles rename(Name name) {
        return new Rdb$roles(name, null);
    }
}
