/*
 * This file is generated by jOOQ.
 */
package ru.smartsarov.citylighting.sprut.tables;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.smartsarov.citylighting.sprut.DefaultSchema;
import ru.smartsarov.citylighting.sprut.tables.records.InsXuserRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InsXuser extends TableImpl<InsXuserRecord> {

    private static final long serialVersionUID = -848216824;

    /**
     * The reference instance of <code>INS_XUSER</code>
     */
    public static final InsXuser INS_XUSER = new InsXuser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InsXuserRecord> getRecordType() {
        return InsXuserRecord.class;
    }

    /**
     * The column <code>INS_XUSER.RESULT</code>.
     */
    public final TableField<InsXuserRecord, Integer> RESULT = createField("RESULT", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>INS_XUSER</code> table reference
     */
    public InsXuser() {
        this(DSL.name("INS_XUSER"), null);
    }

    /**
     * Create an aliased <code>INS_XUSER</code> table reference
     */
    public InsXuser(String alias) {
        this(DSL.name(alias), INS_XUSER);
    }

    /**
     * Create an aliased <code>INS_XUSER</code> table reference
     */
    public InsXuser(Name alias) {
        this(alias, INS_XUSER);
    }

    private InsXuser(Name alias, Table<InsXuserRecord> aliased) {
        this(alias, aliased, new Field[8]);
    }

    private InsXuser(Name alias, Table<InsXuserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> InsXuser(Table<O> child, ForeignKey<O, InsXuserRecord> key) {
        super(child, key, INS_XUSER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InsXuser as(String alias) {
        return new InsXuser(DSL.name(alias), this, parameters);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InsXuser as(Name alias) {
        return new InsXuser(alias, this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public InsXuser rename(String name) {
        return new InsXuser(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public InsXuser rename(Name name) {
        return new InsXuser(name, null, parameters);
    }

    /**
     * Call this table-valued function
     */
    public InsXuser call(Integer userId, Integer userAbId, Integer userGrpId, Integer userType, String userName, String userPassword, String userKey, String userDescription) {
        return new InsXuser(DSL.name(getName()), null, new Field[] { 
              DSL.val(userId, org.jooq.impl.SQLDataType.INTEGER)
            , DSL.val(userAbId, org.jooq.impl.SQLDataType.INTEGER)
            , DSL.val(userGrpId, org.jooq.impl.SQLDataType.INTEGER)
            , DSL.val(userType, org.jooq.impl.SQLDataType.INTEGER)
            , DSL.val(userName, org.jooq.impl.SQLDataType.VARCHAR(30))
            , DSL.val(userPassword, org.jooq.impl.SQLDataType.VARCHAR(16))
            , DSL.val(userKey, org.jooq.impl.SQLDataType.VARCHAR(32))
            , DSL.val(userDescription, org.jooq.impl.SQLDataType.VARCHAR(30))
        });
    }

    /**
     * Call this table-valued function
     */
    public InsXuser call(Field<Integer> userId, Field<Integer> userAbId, Field<Integer> userGrpId, Field<Integer> userType, Field<String> userName, Field<String> userPassword, Field<String> userKey, Field<String> userDescription) {
        return new InsXuser(DSL.name(getName()), null, new Field[] { 
              userId
            , userAbId
            , userGrpId
            , userType
            , userName
            , userPassword
            , userKey
            , userDescription
        });
    }
}
