/*
 * This file is generated by jOOQ.
 */
package ru.smartsarov.citylighting.sprut.tables;


import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.smartsarov.citylighting.sprut.DefaultSchema;
import ru.smartsarov.citylighting.sprut.tables.records.Mon$databaseRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Mon$database extends TableImpl<Mon$databaseRecord> {

    private static final long serialVersionUID = -735328757;

    /**
     * The reference instance of <code>MON$DATABASE</code>
     */
    public static final Mon$database MON$DATABASE = new Mon$database();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Mon$databaseRecord> getRecordType() {
        return Mon$databaseRecord.class;
    }

    /**
     * The column <code>MON$DATABASE.MON$DATABASE_NAME</code>.
     */
    public final TableField<Mon$databaseRecord, String> MON$DATABASE_NAME = createField("MON$DATABASE_NAME", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>MON$DATABASE.MON$PAGE_SIZE</code>.
     */
    public final TableField<Mon$databaseRecord, Short> MON$PAGE_SIZE = createField("MON$PAGE_SIZE", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>MON$DATABASE.MON$ODS_MAJOR</code>.
     */
    public final TableField<Mon$databaseRecord, Short> MON$ODS_MAJOR = createField("MON$ODS_MAJOR", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>MON$DATABASE.MON$ODS_MINOR</code>.
     */
    public final TableField<Mon$databaseRecord, Short> MON$ODS_MINOR = createField("MON$ODS_MINOR", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>MON$DATABASE.MON$OLDEST_TRANSACTION</code>.
     */
    public final TableField<Mon$databaseRecord, Integer> MON$OLDEST_TRANSACTION = createField("MON$OLDEST_TRANSACTION", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>MON$DATABASE.MON$OLDEST_ACTIVE</code>.
     */
    public final TableField<Mon$databaseRecord, Integer> MON$OLDEST_ACTIVE = createField("MON$OLDEST_ACTIVE", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>MON$DATABASE.MON$OLDEST_SNAPSHOT</code>.
     */
    public final TableField<Mon$databaseRecord, Integer> MON$OLDEST_SNAPSHOT = createField("MON$OLDEST_SNAPSHOT", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>MON$DATABASE.MON$NEXT_TRANSACTION</code>.
     */
    public final TableField<Mon$databaseRecord, Integer> MON$NEXT_TRANSACTION = createField("MON$NEXT_TRANSACTION", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>MON$DATABASE.MON$PAGE_BUFFERS</code>.
     */
    public final TableField<Mon$databaseRecord, Integer> MON$PAGE_BUFFERS = createField("MON$PAGE_BUFFERS", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>MON$DATABASE.MON$SQL_DIALECT</code>.
     */
    public final TableField<Mon$databaseRecord, Short> MON$SQL_DIALECT = createField("MON$SQL_DIALECT", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>MON$DATABASE.MON$SHUTDOWN_MODE</code>.
     */
    public final TableField<Mon$databaseRecord, Short> MON$SHUTDOWN_MODE = createField("MON$SHUTDOWN_MODE", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>MON$DATABASE.MON$SWEEP_INTERVAL</code>.
     */
    public final TableField<Mon$databaseRecord, Integer> MON$SWEEP_INTERVAL = createField("MON$SWEEP_INTERVAL", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>MON$DATABASE.MON$READ_ONLY</code>.
     */
    public final TableField<Mon$databaseRecord, Short> MON$READ_ONLY = createField("MON$READ_ONLY", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>MON$DATABASE.MON$FORCED_WRITES</code>.
     */
    public final TableField<Mon$databaseRecord, Short> MON$FORCED_WRITES = createField("MON$FORCED_WRITES", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>MON$DATABASE.MON$RESERVE_SPACE</code>.
     */
    public final TableField<Mon$databaseRecord, Short> MON$RESERVE_SPACE = createField("MON$RESERVE_SPACE", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>MON$DATABASE.MON$CREATION_DATE</code>.
     */
    public final TableField<Mon$databaseRecord, Timestamp> MON$CREATION_DATE = createField("MON$CREATION_DATE", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>MON$DATABASE.MON$PAGES</code>.
     */
    public final TableField<Mon$databaseRecord, Long> MON$PAGES = createField("MON$PAGES", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>MON$DATABASE.MON$STAT_ID</code>.
     */
    public final TableField<Mon$databaseRecord, Integer> MON$STAT_ID = createField("MON$STAT_ID", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>MON$DATABASE.MON$BACKUP_STATE</code>.
     */
    public final TableField<Mon$databaseRecord, Short> MON$BACKUP_STATE = createField("MON$BACKUP_STATE", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * Create a <code>MON$DATABASE</code> table reference
     */
    public Mon$database() {
        this(DSL.name("MON$DATABASE"), null);
    }

    /**
     * Create an aliased <code>MON$DATABASE</code> table reference
     */
    public Mon$database(String alias) {
        this(DSL.name(alias), MON$DATABASE);
    }

    /**
     * Create an aliased <code>MON$DATABASE</code> table reference
     */
    public Mon$database(Name alias) {
        this(alias, MON$DATABASE);
    }

    private Mon$database(Name alias, Table<Mon$databaseRecord> aliased) {
        this(alias, aliased, null);
    }

    private Mon$database(Name alias, Table<Mon$databaseRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Mon$database(Table<O> child, ForeignKey<O, Mon$databaseRecord> key) {
        super(child, key, MON$DATABASE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Mon$database as(String alias) {
        return new Mon$database(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Mon$database as(Name alias) {
        return new Mon$database(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Mon$database rename(String name) {
        return new Mon$database(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Mon$database rename(Name name) {
        return new Mon$database(name, null);
    }
}
