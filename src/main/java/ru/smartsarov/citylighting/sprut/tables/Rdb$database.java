/*
 * This file is generated by jOOQ.
 */
package ru.smartsarov.citylighting.sprut.tables;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.smartsarov.citylighting.sprut.DefaultSchema;
import ru.smartsarov.citylighting.sprut.tables.records.Rdb$databaseRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Rdb$database extends TableImpl<Rdb$databaseRecord> {

    private static final long serialVersionUID = 588798638;

    /**
     * The reference instance of <code>RDB$DATABASE</code>
     */
    public static final Rdb$database RDB$DATABASE = new Rdb$database();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Rdb$databaseRecord> getRecordType() {
        return Rdb$databaseRecord.class;
    }

    /**
     * The column <code>RDB$DATABASE.RDB$DESCRIPTION</code>.
     */
    public final TableField<Rdb$databaseRecord, String> RDB$DESCRIPTION = createField("RDB$DESCRIPTION", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>RDB$DATABASE.RDB$RELATION_ID</code>.
     */
    public final TableField<Rdb$databaseRecord, Short> RDB$RELATION_ID = createField("RDB$RELATION_ID", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$DATABASE.RDB$SECURITY_CLASS</code>.
     */
    public final TableField<Rdb$databaseRecord, String> RDB$SECURITY_CLASS = createField("RDB$SECURITY_CLASS", org.jooq.impl.SQLDataType.CHAR, this, "");

    /**
     * The column <code>RDB$DATABASE.RDB$CHARACTER_SET_NAME</code>.
     */
    public final TableField<Rdb$databaseRecord, String> RDB$CHARACTER_SET_NAME = createField("RDB$CHARACTER_SET_NAME", org.jooq.impl.SQLDataType.CHAR, this, "");

    /**
     * Create a <code>RDB$DATABASE</code> table reference
     */
    public Rdb$database() {
        this(DSL.name("RDB$DATABASE"), null);
    }

    /**
     * Create an aliased <code>RDB$DATABASE</code> table reference
     */
    public Rdb$database(String alias) {
        this(DSL.name(alias), RDB$DATABASE);
    }

    /**
     * Create an aliased <code>RDB$DATABASE</code> table reference
     */
    public Rdb$database(Name alias) {
        this(alias, RDB$DATABASE);
    }

    private Rdb$database(Name alias, Table<Rdb$databaseRecord> aliased) {
        this(alias, aliased, null);
    }

    private Rdb$database(Name alias, Table<Rdb$databaseRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Rdb$database(Table<O> child, ForeignKey<O, Rdb$databaseRecord> key) {
        super(child, key, RDB$DATABASE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rdb$database as(String alias) {
        return new Rdb$database(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rdb$database as(Name alias) {
        return new Rdb$database(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Rdb$database rename(String name) {
        return new Rdb$database(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Rdb$database rename(Name name) {
        return new Rdb$database(name, null);
    }
}
