/*
 * This file is generated by jOOQ.
 */
package ru.smartsarov.citylighting.sprut.tables;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.smartsarov.citylighting.sprut.DefaultSchema;
import ru.smartsarov.citylighting.sprut.tables.records.Rdb$functionsRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Rdb$functions extends TableImpl<Rdb$functionsRecord> {

    private static final long serialVersionUID = -1885339435;

    /**
     * The reference instance of <code>RDB$FUNCTIONS</code>
     */
    public static final Rdb$functions RDB$FUNCTIONS = new Rdb$functions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Rdb$functionsRecord> getRecordType() {
        return Rdb$functionsRecord.class;
    }

    /**
     * The column <code>RDB$FUNCTIONS.RDB$FUNCTION_NAME</code>.
     */
    public final TableField<Rdb$functionsRecord, String> RDB$FUNCTION_NAME = createField("RDB$FUNCTION_NAME", org.jooq.impl.SQLDataType.CHAR, this, "");

    /**
     * The column <code>RDB$FUNCTIONS.RDB$FUNCTION_TYPE</code>.
     */
    public final TableField<Rdb$functionsRecord, Short> RDB$FUNCTION_TYPE = createField("RDB$FUNCTION_TYPE", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$FUNCTIONS.RDB$QUERY_NAME</code>.
     */
    public final TableField<Rdb$functionsRecord, String> RDB$QUERY_NAME = createField("RDB$QUERY_NAME", org.jooq.impl.SQLDataType.CHAR, this, "");

    /**
     * The column <code>RDB$FUNCTIONS.RDB$DESCRIPTION</code>.
     */
    public final TableField<Rdb$functionsRecord, String> RDB$DESCRIPTION = createField("RDB$DESCRIPTION", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>RDB$FUNCTIONS.RDB$MODULE_NAME</code>.
     */
    public final TableField<Rdb$functionsRecord, String> RDB$MODULE_NAME = createField("RDB$MODULE_NAME", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>RDB$FUNCTIONS.RDB$ENTRYPOINT</code>.
     */
    public final TableField<Rdb$functionsRecord, String> RDB$ENTRYPOINT = createField("RDB$ENTRYPOINT", org.jooq.impl.SQLDataType.CHAR, this, "");

    /**
     * The column <code>RDB$FUNCTIONS.RDB$RETURN_ARGUMENT</code>.
     */
    public final TableField<Rdb$functionsRecord, Short> RDB$RETURN_ARGUMENT = createField("RDB$RETURN_ARGUMENT", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$FUNCTIONS.RDB$SYSTEM_FLAG</code>.
     */
    public final TableField<Rdb$functionsRecord, Short> RDB$SYSTEM_FLAG = createField("RDB$SYSTEM_FLAG", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * Create a <code>RDB$FUNCTIONS</code> table reference
     */
    public Rdb$functions() {
        this(DSL.name("RDB$FUNCTIONS"), null);
    }

    /**
     * Create an aliased <code>RDB$FUNCTIONS</code> table reference
     */
    public Rdb$functions(String alias) {
        this(DSL.name(alias), RDB$FUNCTIONS);
    }

    /**
     * Create an aliased <code>RDB$FUNCTIONS</code> table reference
     */
    public Rdb$functions(Name alias) {
        this(alias, RDB$FUNCTIONS);
    }

    private Rdb$functions(Name alias, Table<Rdb$functionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Rdb$functions(Name alias, Table<Rdb$functionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Rdb$functions(Table<O> child, ForeignKey<O, Rdb$functionsRecord> key) {
        super(child, key, RDB$FUNCTIONS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rdb$functions as(String alias) {
        return new Rdb$functions(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rdb$functions as(Name alias) {
        return new Rdb$functions(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Rdb$functions rename(String name) {
        return new Rdb$functions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Rdb$functions rename(Name name) {
        return new Rdb$functions(name, null);
    }
}
