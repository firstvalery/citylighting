/*
 * This file is generated by jOOQ.
 */
package ru.smartsarov.citylighting.sprut.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.smartsarov.citylighting.sprut.DefaultSchema;
import ru.smartsarov.citylighting.sprut.Keys;
import ru.smartsarov.citylighting.sprut.tables.records.AbonentRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Abonent extends TableImpl<AbonentRecord> {

    private static final long serialVersionUID = -1440580251;

    /**
     * The reference instance of <code>ABONENT</code>
     */
    public static final Abonent ABONENT = new Abonent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AbonentRecord> getRecordType() {
        return AbonentRecord.class;
    }

    /**
     * The column <code>ABONENT.AB_ID</code>.
     */
    public final TableField<AbonentRecord, Integer> AB_ID = createField("AB_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>ABONENT.AB_NUM</code>.
     */
    public final TableField<AbonentRecord, Integer> AB_NUM = createField("AB_NUM", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>ABONENT.AB_TYPE</code>.
     */
    public final TableField<AbonentRecord, Integer> AB_TYPE = createField("AB_TYPE", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>ABONENT.AB_NAME</code>.
     */
    public final TableField<AbonentRecord, String> AB_NAME = createField("AB_NAME", org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>ABONENT.AB_NAME1</code>.
     */
    public final TableField<AbonentRecord, String> AB_NAME1 = createField("AB_NAME1", org.jooq.impl.SQLDataType.VARCHAR(60), this, "");

    /**
     * The column <code>ABONENT.AB_NAME2</code>.
     */
    public final TableField<AbonentRecord, String> AB_NAME2 = createField("AB_NAME2", org.jooq.impl.SQLDataType.VARCHAR(60), this, "");

    /**
     * The column <code>ABONENT.AB_ADR_ID</code>.
     */
    public final TableField<AbonentRecord, Integer> AB_ADR_ID = createField("AB_ADR_ID", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>ABONENT.AB_REM</code>.
     */
    public final TableField<AbonentRecord, String> AB_REM = createField("AB_REM", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>ABONENT.AB_TARPLAN</code>.
     */
    public final TableField<AbonentRecord, Integer> AB_TARPLAN = createField("AB_TARPLAN", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>ABONENT.AB_RECUCLE</code>.
     */
    public final TableField<AbonentRecord, Integer> AB_RECUCLE = createField("AB_RECUCLE", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>ABONENT</code> table reference
     */
    public Abonent() {
        this(DSL.name("ABONENT"), null);
    }

    /**
     * Create an aliased <code>ABONENT</code> table reference
     */
    public Abonent(String alias) {
        this(DSL.name(alias), ABONENT);
    }

    /**
     * Create an aliased <code>ABONENT</code> table reference
     */
    public Abonent(Name alias) {
        this(alias, ABONENT);
    }

    private Abonent(Name alias, Table<AbonentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Abonent(Name alias, Table<AbonentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Abonent(Table<O> child, ForeignKey<O, AbonentRecord> key) {
        super(child, key, ABONENT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AbonentRecord> getPrimaryKey() {
        return Keys.INTEG_1;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AbonentRecord>> getKeys() {
        return Arrays.<UniqueKey<AbonentRecord>>asList(Keys.INTEG_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Abonent as(String alias) {
        return new Abonent(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Abonent as(Name alias) {
        return new Abonent(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Abonent rename(String name) {
        return new Abonent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Abonent rename(Name name) {
        return new Abonent(name, null);
    }
}
