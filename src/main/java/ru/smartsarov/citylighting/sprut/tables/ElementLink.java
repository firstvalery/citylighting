/*
 * This file is generated by jOOQ.
 */
package ru.smartsarov.citylighting.sprut.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.smartsarov.citylighting.sprut.DefaultSchema;
import ru.smartsarov.citylighting.sprut.Keys;
import ru.smartsarov.citylighting.sprut.tables.records.ElementLinkRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ElementLink extends TableImpl<ElementLinkRecord> {

    private static final long serialVersionUID = 556452742;

    /**
     * The reference instance of <code>ELEMENT_LINK</code>
     */
    public static final ElementLink ELEMENT_LINK = new ElementLink();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ElementLinkRecord> getRecordType() {
        return ElementLinkRecord.class;
    }

    /**
     * The column <code>ELEMENT_LINK.PARENT_ETYPE</code>.
     */
    public final TableField<ElementLinkRecord, Integer> PARENT_ETYPE = createField("PARENT_ETYPE", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>ELEMENT_LINK.PARENT_ID</code>.
     */
    public final TableField<ElementLinkRecord, Integer> PARENT_ID = createField("PARENT_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>ELEMENT_LINK.PARENT_SLOT_NUM</code>.
     */
    public final TableField<ElementLinkRecord, Integer> PARENT_SLOT_NUM = createField("PARENT_SLOT_NUM", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>ELEMENT_LINK.PARENT_SLOT_MULTIPLE</code>.
     */
    public final TableField<ElementLinkRecord, Integer> PARENT_SLOT_MULTIPLE = createField("PARENT_SLOT_MULTIPLE", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>ELEMENT_LINK.ENABLED</code>.
     */
    public final TableField<ElementLinkRecord, Short> ENABLED = createField("ENABLED", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>ELEMENT_LINK.LINKED_ETYPE</code>.
     */
    public final TableField<ElementLinkRecord, Integer> LINKED_ETYPE = createField("LINKED_ETYPE", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>ELEMENT_LINK.LINKED_ID</code>.
     */
    public final TableField<ElementLinkRecord, Integer> LINKED_ID = createField("LINKED_ID", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>ELEMENT_LINK.SLOT_ETYPE</code>.
     */
    public final TableField<ElementLinkRecord, Integer> SLOT_ETYPE = createField("SLOT_ETYPE", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>ELEMENT_LINK.SLOT_ATYPE</code>.
     */
    public final TableField<ElementLinkRecord, Integer> SLOT_ATYPE = createField("SLOT_ATYPE", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>ELEMENT_LINK.SLOT_BTYPE</code>.
     */
    public final TableField<ElementLinkRecord, Integer> SLOT_BTYPE = createField("SLOT_BTYPE", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>ELEMENT_LINK</code> table reference
     */
    public ElementLink() {
        this(DSL.name("ELEMENT_LINK"), null);
    }

    /**
     * Create an aliased <code>ELEMENT_LINK</code> table reference
     */
    public ElementLink(String alias) {
        this(DSL.name(alias), ELEMENT_LINK);
    }

    /**
     * Create an aliased <code>ELEMENT_LINK</code> table reference
     */
    public ElementLink(Name alias) {
        this(alias, ELEMENT_LINK);
    }

    private ElementLink(Name alias, Table<ElementLinkRecord> aliased) {
        this(alias, aliased, null);
    }

    private ElementLink(Name alias, Table<ElementLinkRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ElementLink(Table<O> child, ForeignKey<O, ElementLinkRecord> key) {
        super(child, key, ELEMENT_LINK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ElementLinkRecord> getPrimaryKey() {
        return Keys.PK_ELEMENT_LINK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ElementLinkRecord>> getKeys() {
        return Arrays.<UniqueKey<ElementLinkRecord>>asList(Keys.PK_ELEMENT_LINK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ElementLink as(String alias) {
        return new ElementLink(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ElementLink as(Name alias) {
        return new ElementLink(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ElementLink rename(String name) {
        return new ElementLink(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ElementLink rename(Name name) {
        return new ElementLink(name, null);
    }
}
