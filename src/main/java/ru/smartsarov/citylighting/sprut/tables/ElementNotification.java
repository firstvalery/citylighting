/*
 * This file is generated by jOOQ.
 */
package ru.smartsarov.citylighting.sprut.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.smartsarov.citylighting.sprut.DefaultSchema;
import ru.smartsarov.citylighting.sprut.Keys;
import ru.smartsarov.citylighting.sprut.tables.records.ElementNotificationRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ElementNotification extends TableImpl<ElementNotificationRecord> {

    private static final long serialVersionUID = 1980047618;

    /**
     * The reference instance of <code>ELEMENT_NOTIFICATION</code>
     */
    public static final ElementNotification ELEMENT_NOTIFICATION = new ElementNotification();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ElementNotificationRecord> getRecordType() {
        return ElementNotificationRecord.class;
    }

    /**
     * The column <code>ELEMENT_NOTIFICATION.ID</code>.
     */
    public final TableField<ElementNotificationRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>ELEMENT_NOTIFICATION.ATYPE</code>.
     */
    public final TableField<ElementNotificationRecord, Integer> ATYPE = createField("ATYPE", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>ELEMENT_NOTIFICATION.BTYPE</code>.
     */
    public final TableField<ElementNotificationRecord, Integer> BTYPE = createField("BTYPE", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>ELEMENT_NOTIFICATION.NAME</code>.
     */
    public final TableField<ElementNotificationRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR(256), this, "");

    /**
     * The column <code>ELEMENT_NOTIFICATION.MEMO</code>.
     */
    public final TableField<ElementNotificationRecord, String> MEMO = createField("MEMO", org.jooq.impl.SQLDataType.VARCHAR(512), this, "");

    /**
     * The column <code>ELEMENT_NOTIFICATION.ENABLED</code>.
     */
    public final TableField<ElementNotificationRecord, Short> ENABLED = createField("ENABLED", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * Create a <code>ELEMENT_NOTIFICATION</code> table reference
     */
    public ElementNotification() {
        this(DSL.name("ELEMENT_NOTIFICATION"), null);
    }

    /**
     * Create an aliased <code>ELEMENT_NOTIFICATION</code> table reference
     */
    public ElementNotification(String alias) {
        this(DSL.name(alias), ELEMENT_NOTIFICATION);
    }

    /**
     * Create an aliased <code>ELEMENT_NOTIFICATION</code> table reference
     */
    public ElementNotification(Name alias) {
        this(alias, ELEMENT_NOTIFICATION);
    }

    private ElementNotification(Name alias, Table<ElementNotificationRecord> aliased) {
        this(alias, aliased, null);
    }

    private ElementNotification(Name alias, Table<ElementNotificationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ElementNotification(Table<O> child, ForeignKey<O, ElementNotificationRecord> key) {
        super(child, key, ELEMENT_NOTIFICATION);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ElementNotificationRecord> getPrimaryKey() {
        return Keys.PK_ELEMENT_NOTIFICATION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ElementNotificationRecord>> getKeys() {
        return Arrays.<UniqueKey<ElementNotificationRecord>>asList(Keys.PK_ELEMENT_NOTIFICATION);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ElementNotification as(String alias) {
        return new ElementNotification(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ElementNotification as(Name alias) {
        return new ElementNotification(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ElementNotification rename(String name) {
        return new ElementNotification(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ElementNotification rename(Name name) {
        return new ElementNotification(name, null);
    }
}
