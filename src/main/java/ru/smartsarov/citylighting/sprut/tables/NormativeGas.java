/*
 * This file is generated by jOOQ.
 */
package ru.smartsarov.citylighting.sprut.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.smartsarov.citylighting.sprut.DefaultSchema;
import ru.smartsarov.citylighting.sprut.Keys;
import ru.smartsarov.citylighting.sprut.tables.records.NormativeGasRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NormativeGas extends TableImpl<NormativeGasRecord> {

    private static final long serialVersionUID = 1876533628;

    /**
     * The reference instance of <code>NORMATIVE_GAS</code>
     */
    public static final NormativeGas NORMATIVE_GAS = new NormativeGas();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NormativeGasRecord> getRecordType() {
        return NormativeGasRecord.class;
    }

    /**
     * The column <code>NORMATIVE_GAS.ID</code>.
     */
    public final TableField<NormativeGasRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>NORMATIVE_GAS.NORM_ID</code>.
     */
    public final TableField<NormativeGasRecord, Integer> NORM_ID = createField("NORM_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>NORMATIVE_GAS.TYPE1</code>.
     */
    public final TableField<NormativeGasRecord, Short> TYPE1 = createField("TYPE1", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>NORMATIVE_GAS.TYPE2</code>.
     */
    public final TableField<NormativeGasRecord, Short> TYPE2 = createField("TYPE2", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>NORMATIVE_GAS.TYPE3</code>.
     */
    public final TableField<NormativeGasRecord, Short> TYPE3 = createField("TYPE3", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>NORMATIVE_GAS.TYPE4</code>.
     */
    public final TableField<NormativeGasRecord, Short> TYPE4 = createField("TYPE4", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>NORMATIVE_GAS.V1</code>.
     */
    public final TableField<NormativeGasRecord, Double> V1 = createField("V1", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>NORMATIVE_GAS.GV1</code>.
     */
    public final TableField<NormativeGasRecord, Double> GV1 = createField("GV1", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * Create a <code>NORMATIVE_GAS</code> table reference
     */
    public NormativeGas() {
        this(DSL.name("NORMATIVE_GAS"), null);
    }

    /**
     * Create an aliased <code>NORMATIVE_GAS</code> table reference
     */
    public NormativeGas(String alias) {
        this(DSL.name(alias), NORMATIVE_GAS);
    }

    /**
     * Create an aliased <code>NORMATIVE_GAS</code> table reference
     */
    public NormativeGas(Name alias) {
        this(alias, NORMATIVE_GAS);
    }

    private NormativeGas(Name alias, Table<NormativeGasRecord> aliased) {
        this(alias, aliased, null);
    }

    private NormativeGas(Name alias, Table<NormativeGasRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> NormativeGas(Table<O> child, ForeignKey<O, NormativeGasRecord> key) {
        super(child, key, NORMATIVE_GAS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<NormativeGasRecord> getPrimaryKey() {
        return Keys.NORMATIVE_GAS_KEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<NormativeGasRecord>> getKeys() {
        return Arrays.<UniqueKey<NormativeGasRecord>>asList(Keys.NORMATIVE_GAS_KEY, Keys.NORMATIVE_GAS_UNQ);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NormativeGas as(String alias) {
        return new NormativeGas(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NormativeGas as(Name alias) {
        return new NormativeGas(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public NormativeGas rename(String name) {
        return new NormativeGas(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NormativeGas rename(Name name) {
        return new NormativeGas(name, null);
    }
}
