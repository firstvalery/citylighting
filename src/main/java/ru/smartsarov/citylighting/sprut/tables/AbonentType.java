/*
 * This file is generated by jOOQ.
 */
package ru.smartsarov.citylighting.sprut.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.smartsarov.citylighting.sprut.DefaultSchema;
import ru.smartsarov.citylighting.sprut.Keys;
import ru.smartsarov.citylighting.sprut.tables.records.AbonentTypeRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AbonentType extends TableImpl<AbonentTypeRecord> {

    private static final long serialVersionUID = 546000856;

    /**
     * The reference instance of <code>ABONENT_TYPE</code>
     */
    public static final AbonentType ABONENT_TYPE = new AbonentType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AbonentTypeRecord> getRecordType() {
        return AbonentTypeRecord.class;
    }

    /**
     * The column <code>ABONENT_TYPE.AT_ID</code>.
     */
    public final TableField<AbonentTypeRecord, Integer> AT_ID = createField("AT_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>ABONENT_TYPE.AT_NAME</code>.
     */
    public final TableField<AbonentTypeRecord, String> AT_NAME = createField("AT_NAME", org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>ABONENT_TYPE.AT_SNAME</code>.
     */
    public final TableField<AbonentTypeRecord, String> AT_SNAME = createField("AT_SNAME", org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * Create a <code>ABONENT_TYPE</code> table reference
     */
    public AbonentType() {
        this(DSL.name("ABONENT_TYPE"), null);
    }

    /**
     * Create an aliased <code>ABONENT_TYPE</code> table reference
     */
    public AbonentType(String alias) {
        this(DSL.name(alias), ABONENT_TYPE);
    }

    /**
     * Create an aliased <code>ABONENT_TYPE</code> table reference
     */
    public AbonentType(Name alias) {
        this(alias, ABONENT_TYPE);
    }

    private AbonentType(Name alias, Table<AbonentTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private AbonentType(Name alias, Table<AbonentTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> AbonentType(Table<O> child, ForeignKey<O, AbonentTypeRecord> key) {
        super(child, key, ABONENT_TYPE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AbonentTypeRecord> getPrimaryKey() {
        return Keys.INTEG_2;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AbonentTypeRecord>> getKeys() {
        return Arrays.<UniqueKey<AbonentTypeRecord>>asList(Keys.INTEG_2);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AbonentType as(String alias) {
        return new AbonentType(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AbonentType as(Name alias) {
        return new AbonentType(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AbonentType rename(String name) {
        return new AbonentType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AbonentType rename(Name name) {
        return new AbonentType(name, null);
    }
}
