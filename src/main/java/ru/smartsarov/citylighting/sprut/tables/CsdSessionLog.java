/*
 * This file is generated by jOOQ.
 */
package ru.smartsarov.citylighting.sprut.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.smartsarov.citylighting.sprut.DefaultSchema;
import ru.smartsarov.citylighting.sprut.Keys;
import ru.smartsarov.citylighting.sprut.tables.records.CsdSessionLogRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CsdSessionLog extends TableImpl<CsdSessionLogRecord> {

    private static final long serialVersionUID = -1022427293;

    /**
     * The reference instance of <code>CSD_SESSION_LOG</code>
     */
    public static final CsdSessionLog CSD_SESSION_LOG = new CsdSessionLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CsdSessionLogRecord> getRecordType() {
        return CsdSessionLogRecord.class;
    }

    /**
     * The column <code>CSD_SESSION_LOG.SESSION_ID</code>.
     */
    public final TableField<CsdSessionLogRecord, Integer> SESSION_ID = createField("SESSION_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>CSD_SESSION_LOG.CALLER_ID</code>.
     */
    public final TableField<CsdSessionLogRecord, Integer> CALLER_ID = createField("CALLER_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>CSD_SESSION_LOG.USK_ID</code>.
     */
    public final TableField<CsdSessionLogRecord, Integer> USK_ID = createField("USK_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>CSD_SESSION_LOG.DIAL_TIME</code>.
     */
    public final TableField<CsdSessionLogRecord, Timestamp> DIAL_TIME = createField("DIAL_TIME", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>CSD_SESSION_LOG.CONNECT_TIME</code>.
     */
    public final TableField<CsdSessionLogRecord, Timestamp> CONNECT_TIME = createField("CONNECT_TIME", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>CSD_SESSION_LOG.HANGUP_TIME</code>.
     */
    public final TableField<CsdSessionLogRecord, Timestamp> HANGUP_TIME = createField("HANGUP_TIME", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>CSD_SESSION_LOG.END_STATE</code>.
     */
    public final TableField<CsdSessionLogRecord, Integer> END_STATE = createField("END_STATE", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>CSD_SESSION_LOG.DURATION</code>.
     */
    public final TableField<CsdSessionLogRecord, Long> DURATION = createField("DURATION", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>CSD_SESSION_LOG</code> table reference
     */
    public CsdSessionLog() {
        this(DSL.name("CSD_SESSION_LOG"), null);
    }

    /**
     * Create an aliased <code>CSD_SESSION_LOG</code> table reference
     */
    public CsdSessionLog(String alias) {
        this(DSL.name(alias), CSD_SESSION_LOG);
    }

    /**
     * Create an aliased <code>CSD_SESSION_LOG</code> table reference
     */
    public CsdSessionLog(Name alias) {
        this(alias, CSD_SESSION_LOG);
    }

    private CsdSessionLog(Name alias, Table<CsdSessionLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private CsdSessionLog(Name alias, Table<CsdSessionLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> CsdSessionLog(Table<O> child, ForeignKey<O, CsdSessionLogRecord> key) {
        super(child, key, CSD_SESSION_LOG);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CsdSessionLogRecord> getPrimaryKey() {
        return Keys.PK_CSD_SESSION_LOG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CsdSessionLogRecord>> getKeys() {
        return Arrays.<UniqueKey<CsdSessionLogRecord>>asList(Keys.PK_CSD_SESSION_LOG);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<CsdSessionLogRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CsdSessionLogRecord, ?>>asList(Keys.FK_CSD_SESSION_LOG_0, Keys.FK_CSD_SESSION_LOG_1);
    }

    public CsdModemLocal csdModemLocal() {
        return new CsdModemLocal(this, Keys.FK_CSD_SESSION_LOG_0);
    }

    public CsdModemUsk csdModemUsk() {
        return new CsdModemUsk(this, Keys.FK_CSD_SESSION_LOG_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CsdSessionLog as(String alias) {
        return new CsdSessionLog(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CsdSessionLog as(Name alias) {
        return new CsdSessionLog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CsdSessionLog rename(String name) {
        return new CsdSessionLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CsdSessionLog rename(Name name) {
        return new CsdSessionLog(name, null);
    }
}
