/*
 * This file is generated by jOOQ.
 */
package ru.smartsarov.citylighting.sprut.tables.records;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record10;
import org.jooq.Row10;
import org.jooq.impl.TableRecordImpl;

import ru.smartsarov.citylighting.sprut.tables.Rdb$functionArguments;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Rdb$functionArgumentsRecord extends TableRecordImpl<Rdb$functionArgumentsRecord> implements Record10<String, Short, Short, Short, Short, Short, Short, Short, Short, Short> {

    private static final long serialVersionUID = 1443113723;

    /**
     * Setter for <code>RDB$FUNCTION_ARGUMENTS.RDB$FUNCTION_NAME</code>.
     */
    public void setRdb$functionName(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>RDB$FUNCTION_ARGUMENTS.RDB$FUNCTION_NAME</code>.
     */
    public String getRdb$functionName() {
        return (String) get(0);
    }

    /**
     * Setter for <code>RDB$FUNCTION_ARGUMENTS.RDB$ARGUMENT_POSITION</code>.
     */
    public void setRdb$argumentPosition(Short value) {
        set(1, value);
    }

    /**
     * Getter for <code>RDB$FUNCTION_ARGUMENTS.RDB$ARGUMENT_POSITION</code>.
     */
    public Short getRdb$argumentPosition() {
        return (Short) get(1);
    }

    /**
     * Setter for <code>RDB$FUNCTION_ARGUMENTS.RDB$MECHANISM</code>.
     */
    public void setRdb$mechanism(Short value) {
        set(2, value);
    }

    /**
     * Getter for <code>RDB$FUNCTION_ARGUMENTS.RDB$MECHANISM</code>.
     */
    public Short getRdb$mechanism() {
        return (Short) get(2);
    }

    /**
     * Setter for <code>RDB$FUNCTION_ARGUMENTS.RDB$FIELD_TYPE</code>.
     */
    public void setRdb$fieldType(Short value) {
        set(3, value);
    }

    /**
     * Getter for <code>RDB$FUNCTION_ARGUMENTS.RDB$FIELD_TYPE</code>.
     */
    public Short getRdb$fieldType() {
        return (Short) get(3);
    }

    /**
     * Setter for <code>RDB$FUNCTION_ARGUMENTS.RDB$FIELD_SCALE</code>.
     */
    public void setRdb$fieldScale(Short value) {
        set(4, value);
    }

    /**
     * Getter for <code>RDB$FUNCTION_ARGUMENTS.RDB$FIELD_SCALE</code>.
     */
    public Short getRdb$fieldScale() {
        return (Short) get(4);
    }

    /**
     * Setter for <code>RDB$FUNCTION_ARGUMENTS.RDB$FIELD_LENGTH</code>.
     */
    public void setRdb$fieldLength(Short value) {
        set(5, value);
    }

    /**
     * Getter for <code>RDB$FUNCTION_ARGUMENTS.RDB$FIELD_LENGTH</code>.
     */
    public Short getRdb$fieldLength() {
        return (Short) get(5);
    }

    /**
     * Setter for <code>RDB$FUNCTION_ARGUMENTS.RDB$FIELD_SUB_TYPE</code>.
     */
    public void setRdb$fieldSubType(Short value) {
        set(6, value);
    }

    /**
     * Getter for <code>RDB$FUNCTION_ARGUMENTS.RDB$FIELD_SUB_TYPE</code>.
     */
    public Short getRdb$fieldSubType() {
        return (Short) get(6);
    }

    /**
     * Setter for <code>RDB$FUNCTION_ARGUMENTS.RDB$CHARACTER_SET_ID</code>.
     */
    public void setRdb$characterSetId(Short value) {
        set(7, value);
    }

    /**
     * Getter for <code>RDB$FUNCTION_ARGUMENTS.RDB$CHARACTER_SET_ID</code>.
     */
    public Short getRdb$characterSetId() {
        return (Short) get(7);
    }

    /**
     * Setter for <code>RDB$FUNCTION_ARGUMENTS.RDB$FIELD_PRECISION</code>.
     */
    public void setRdb$fieldPrecision(Short value) {
        set(8, value);
    }

    /**
     * Getter for <code>RDB$FUNCTION_ARGUMENTS.RDB$FIELD_PRECISION</code>.
     */
    public Short getRdb$fieldPrecision() {
        return (Short) get(8);
    }

    /**
     * Setter for <code>RDB$FUNCTION_ARGUMENTS.RDB$CHARACTER_LENGTH</code>.
     */
    public void setRdb$characterLength(Short value) {
        set(9, value);
    }

    /**
     * Getter for <code>RDB$FUNCTION_ARGUMENTS.RDB$CHARACTER_LENGTH</code>.
     */
    public Short getRdb$characterLength() {
        return (Short) get(9);
    }

    // -------------------------------------------------------------------------
    // Record10 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row10<String, Short, Short, Short, Short, Short, Short, Short, Short, Short> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row10<String, Short, Short, Short, Short, Short, Short, Short, Short, Short> valuesRow() {
        return (Row10) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field1() {
        return Rdb$functionArguments.RDB$FUNCTION_ARGUMENTS.RDB$FUNCTION_NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Short> field2() {
        return Rdb$functionArguments.RDB$FUNCTION_ARGUMENTS.RDB$ARGUMENT_POSITION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Short> field3() {
        return Rdb$functionArguments.RDB$FUNCTION_ARGUMENTS.RDB$MECHANISM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Short> field4() {
        return Rdb$functionArguments.RDB$FUNCTION_ARGUMENTS.RDB$FIELD_TYPE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Short> field5() {
        return Rdb$functionArguments.RDB$FUNCTION_ARGUMENTS.RDB$FIELD_SCALE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Short> field6() {
        return Rdb$functionArguments.RDB$FUNCTION_ARGUMENTS.RDB$FIELD_LENGTH;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Short> field7() {
        return Rdb$functionArguments.RDB$FUNCTION_ARGUMENTS.RDB$FIELD_SUB_TYPE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Short> field8() {
        return Rdb$functionArguments.RDB$FUNCTION_ARGUMENTS.RDB$CHARACTER_SET_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Short> field9() {
        return Rdb$functionArguments.RDB$FUNCTION_ARGUMENTS.RDB$FIELD_PRECISION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Short> field10() {
        return Rdb$functionArguments.RDB$FUNCTION_ARGUMENTS.RDB$CHARACTER_LENGTH;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component1() {
        return getRdb$functionName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short component2() {
        return getRdb$argumentPosition();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short component3() {
        return getRdb$mechanism();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short component4() {
        return getRdb$fieldType();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short component5() {
        return getRdb$fieldScale();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short component6() {
        return getRdb$fieldLength();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short component7() {
        return getRdb$fieldSubType();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short component8() {
        return getRdb$characterSetId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short component9() {
        return getRdb$fieldPrecision();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short component10() {
        return getRdb$characterLength();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value1() {
        return getRdb$functionName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short value2() {
        return getRdb$argumentPosition();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short value3() {
        return getRdb$mechanism();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short value4() {
        return getRdb$fieldType();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short value5() {
        return getRdb$fieldScale();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short value6() {
        return getRdb$fieldLength();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short value7() {
        return getRdb$fieldSubType();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short value8() {
        return getRdb$characterSetId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short value9() {
        return getRdb$fieldPrecision();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short value10() {
        return getRdb$characterLength();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rdb$functionArgumentsRecord value1(String value) {
        setRdb$functionName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rdb$functionArgumentsRecord value2(Short value) {
        setRdb$argumentPosition(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rdb$functionArgumentsRecord value3(Short value) {
        setRdb$mechanism(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rdb$functionArgumentsRecord value4(Short value) {
        setRdb$fieldType(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rdb$functionArgumentsRecord value5(Short value) {
        setRdb$fieldScale(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rdb$functionArgumentsRecord value6(Short value) {
        setRdb$fieldLength(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rdb$functionArgumentsRecord value7(Short value) {
        setRdb$fieldSubType(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rdb$functionArgumentsRecord value8(Short value) {
        setRdb$characterSetId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rdb$functionArgumentsRecord value9(Short value) {
        setRdb$fieldPrecision(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rdb$functionArgumentsRecord value10(Short value) {
        setRdb$characterLength(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rdb$functionArgumentsRecord values(String value1, Short value2, Short value3, Short value4, Short value5, Short value6, Short value7, Short value8, Short value9, Short value10) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached Rdb$functionArgumentsRecord
     */
    public Rdb$functionArgumentsRecord() {
        super(Rdb$functionArguments.RDB$FUNCTION_ARGUMENTS);
    }

    /**
     * Create a detached, initialised Rdb$functionArgumentsRecord
     */
    public Rdb$functionArgumentsRecord(String rdb$functionName, Short rdb$argumentPosition, Short rdb$mechanism, Short rdb$fieldType, Short rdb$fieldScale, Short rdb$fieldLength, Short rdb$fieldSubType, Short rdb$characterSetId, Short rdb$fieldPrecision, Short rdb$characterLength) {
        super(Rdb$functionArguments.RDB$FUNCTION_ARGUMENTS);

        set(0, rdb$functionName);
        set(1, rdb$argumentPosition);
        set(2, rdb$mechanism);
        set(3, rdb$fieldType);
        set(4, rdb$fieldScale);
        set(5, rdb$fieldLength);
        set(6, rdb$fieldSubType);
        set(7, rdb$characterSetId);
        set(8, rdb$fieldPrecision);
        set(9, rdb$characterLength);
    }
}
