/*
 * This file is generated by jOOQ.
 */
package ru.smartsarov.citylighting.sprut.tables;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.smartsarov.citylighting.sprut.DefaultSchema;
import ru.smartsarov.citylighting.sprut.tables.records.Rdb$triggersRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Rdb$triggers extends TableImpl<Rdb$triggersRecord> {

    private static final long serialVersionUID = 1460522096;

    /**
     * The reference instance of <code>RDB$TRIGGERS</code>
     */
    public static final Rdb$triggers RDB$TRIGGERS = new Rdb$triggers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Rdb$triggersRecord> getRecordType() {
        return Rdb$triggersRecord.class;
    }

    /**
     * The column <code>RDB$TRIGGERS.RDB$TRIGGER_NAME</code>.
     */
    public final TableField<Rdb$triggersRecord, String> RDB$TRIGGER_NAME = createField("RDB$TRIGGER_NAME", org.jooq.impl.SQLDataType.CHAR, this, "");

    /**
     * The column <code>RDB$TRIGGERS.RDB$RELATION_NAME</code>.
     */
    public final TableField<Rdb$triggersRecord, String> RDB$RELATION_NAME = createField("RDB$RELATION_NAME", org.jooq.impl.SQLDataType.CHAR, this, "");

    /**
     * The column <code>RDB$TRIGGERS.RDB$TRIGGER_SEQUENCE</code>.
     */
    public final TableField<Rdb$triggersRecord, Short> RDB$TRIGGER_SEQUENCE = createField("RDB$TRIGGER_SEQUENCE", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$TRIGGERS.RDB$TRIGGER_TYPE</code>.
     */
    public final TableField<Rdb$triggersRecord, Short> RDB$TRIGGER_TYPE = createField("RDB$TRIGGER_TYPE", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$TRIGGERS.RDB$TRIGGER_SOURCE</code>.
     */
    public final TableField<Rdb$triggersRecord, String> RDB$TRIGGER_SOURCE = createField("RDB$TRIGGER_SOURCE", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>RDB$TRIGGERS.RDB$TRIGGER_BLR</code>.
     */
    public final TableField<Rdb$triggersRecord, byte[]> RDB$TRIGGER_BLR = createField("RDB$TRIGGER_BLR", org.jooq.impl.SQLDataType.BLOB, this, "");

    /**
     * The column <code>RDB$TRIGGERS.RDB$DESCRIPTION</code>.
     */
    public final TableField<Rdb$triggersRecord, String> RDB$DESCRIPTION = createField("RDB$DESCRIPTION", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>RDB$TRIGGERS.RDB$TRIGGER_INACTIVE</code>.
     */
    public final TableField<Rdb$triggersRecord, Short> RDB$TRIGGER_INACTIVE = createField("RDB$TRIGGER_INACTIVE", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$TRIGGERS.RDB$SYSTEM_FLAG</code>.
     */
    public final TableField<Rdb$triggersRecord, Short> RDB$SYSTEM_FLAG = createField("RDB$SYSTEM_FLAG", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$TRIGGERS.RDB$FLAGS</code>.
     */
    public final TableField<Rdb$triggersRecord, Short> RDB$FLAGS = createField("RDB$FLAGS", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$TRIGGERS.RDB$VALID_BLR</code>.
     */
    public final TableField<Rdb$triggersRecord, Short> RDB$VALID_BLR = createField("RDB$VALID_BLR", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$TRIGGERS.RDB$DEBUG_INFO</code>.
     */
    public final TableField<Rdb$triggersRecord, byte[]> RDB$DEBUG_INFO = createField("RDB$DEBUG_INFO", org.jooq.impl.SQLDataType.BLOB, this, "");

    /**
     * Create a <code>RDB$TRIGGERS</code> table reference
     */
    public Rdb$triggers() {
        this(DSL.name("RDB$TRIGGERS"), null);
    }

    /**
     * Create an aliased <code>RDB$TRIGGERS</code> table reference
     */
    public Rdb$triggers(String alias) {
        this(DSL.name(alias), RDB$TRIGGERS);
    }

    /**
     * Create an aliased <code>RDB$TRIGGERS</code> table reference
     */
    public Rdb$triggers(Name alias) {
        this(alias, RDB$TRIGGERS);
    }

    private Rdb$triggers(Name alias, Table<Rdb$triggersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Rdb$triggers(Name alias, Table<Rdb$triggersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Rdb$triggers(Table<O> child, ForeignKey<O, Rdb$triggersRecord> key) {
        super(child, key, RDB$TRIGGERS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rdb$triggers as(String alias) {
        return new Rdb$triggers(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rdb$triggers as(Name alias) {
        return new Rdb$triggers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Rdb$triggers rename(String name) {
        return new Rdb$triggers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Rdb$triggers rename(Name name) {
        return new Rdb$triggers(name, null);
    }
}
