/*
 * This file is generated by jOOQ.
 */
package ru.smartsarov.citylighting.sprut.tables;


import java.sql.Date;
import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.smartsarov.citylighting.sprut.DefaultSchema;
import ru.smartsarov.citylighting.sprut.tables.records.GetPkeLogRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GetPkeLog extends TableImpl<GetPkeLogRecord> {

    private static final long serialVersionUID = -183544424;

    /**
     * The reference instance of <code>GET_PKE_LOG</code>
     */
    public static final GetPkeLog GET_PKE_LOG = new GetPkeLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GetPkeLogRecord> getRecordType() {
        return GetPkeLogRecord.class;
    }

    /**
     * The column <code>GET_PKE_LOG.PKL_RECNO</code>.
     */
    public final TableField<GetPkeLogRecord, Integer> PKL_RECNO = createField("PKL_RECNO", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>GET_PKE_LOG.PKL_INDEX</code>.
     */
    public final TableField<GetPkeLogRecord, Short> PKL_INDEX = createField("PKL_INDEX", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>GET_PKE_LOG.PKL_IN</code>.
     */
    public final TableField<GetPkeLogRecord, Timestamp> PKL_IN = createField("PKL_IN", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>GET_PKE_LOG.PKL_OUT</code>.
     */
    public final TableField<GetPkeLogRecord, Timestamp> PKL_OUT = createField("PKL_OUT", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * Create a <code>GET_PKE_LOG</code> table reference
     */
    public GetPkeLog() {
        this(DSL.name("GET_PKE_LOG"), null);
    }

    /**
     * Create an aliased <code>GET_PKE_LOG</code> table reference
     */
    public GetPkeLog(String alias) {
        this(DSL.name(alias), GET_PKE_LOG);
    }

    /**
     * Create an aliased <code>GET_PKE_LOG</code> table reference
     */
    public GetPkeLog(Name alias) {
        this(alias, GET_PKE_LOG);
    }

    private GetPkeLog(Name alias, Table<GetPkeLogRecord> aliased) {
        this(alias, aliased, new Field[4]);
    }

    private GetPkeLog(Name alias, Table<GetPkeLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> GetPkeLog(Table<O> child, ForeignKey<O, GetPkeLogRecord> key) {
        super(child, key, GET_PKE_LOG);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GetPkeLog as(String alias) {
        return new GetPkeLog(DSL.name(alias), this, parameters);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GetPkeLog as(Name alias) {
        return new GetPkeLog(alias, this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public GetPkeLog rename(String name) {
        return new GetPkeLog(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public GetPkeLog rename(Name name) {
        return new GetPkeLog(name, null, parameters);
    }

    /**
     * Call this table-valued function
     */
    public GetPkeLog call(Integer cid, Integer kind, Date sdate, Date edate) {
        return new GetPkeLog(DSL.name(getName()), null, new Field[] { 
              DSL.val(cid, org.jooq.impl.SQLDataType.INTEGER)
            , DSL.val(kind, org.jooq.impl.SQLDataType.INTEGER)
            , DSL.val(sdate, org.jooq.impl.SQLDataType.DATE)
            , DSL.val(edate, org.jooq.impl.SQLDataType.DATE)
        });
    }

    /**
     * Call this table-valued function
     */
    public GetPkeLog call(Field<Integer> cid, Field<Integer> kind, Field<Date> sdate, Field<Date> edate) {
        return new GetPkeLog(DSL.name(getName()), null, new Field[] { 
              cid
            , kind
            , sdate
            , edate
        });
    }
}
