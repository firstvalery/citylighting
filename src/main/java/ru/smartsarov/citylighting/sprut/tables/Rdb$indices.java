/*
 * This file is generated by jOOQ.
 */
package ru.smartsarov.citylighting.sprut.tables;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.smartsarov.citylighting.sprut.DefaultSchema;
import ru.smartsarov.citylighting.sprut.tables.records.Rdb$indicesRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Rdb$indices extends TableImpl<Rdb$indicesRecord> {

    private static final long serialVersionUID = -1384901272;

    /**
     * The reference instance of <code>RDB$INDICES</code>
     */
    public static final Rdb$indices RDB$INDICES = new Rdb$indices();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Rdb$indicesRecord> getRecordType() {
        return Rdb$indicesRecord.class;
    }

    /**
     * The column <code>RDB$INDICES.RDB$INDEX_NAME</code>.
     */
    public final TableField<Rdb$indicesRecord, String> RDB$INDEX_NAME = createField("RDB$INDEX_NAME", org.jooq.impl.SQLDataType.CHAR, this, "");

    /**
     * The column <code>RDB$INDICES.RDB$RELATION_NAME</code>.
     */
    public final TableField<Rdb$indicesRecord, String> RDB$RELATION_NAME = createField("RDB$RELATION_NAME", org.jooq.impl.SQLDataType.CHAR, this, "");

    /**
     * The column <code>RDB$INDICES.RDB$INDEX_ID</code>.
     */
    public final TableField<Rdb$indicesRecord, Short> RDB$INDEX_ID = createField("RDB$INDEX_ID", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$INDICES.RDB$UNIQUE_FLAG</code>.
     */
    public final TableField<Rdb$indicesRecord, Short> RDB$UNIQUE_FLAG = createField("RDB$UNIQUE_FLAG", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$INDICES.RDB$DESCRIPTION</code>.
     */
    public final TableField<Rdb$indicesRecord, String> RDB$DESCRIPTION = createField("RDB$DESCRIPTION", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>RDB$INDICES.RDB$SEGMENT_COUNT</code>.
     */
    public final TableField<Rdb$indicesRecord, Short> RDB$SEGMENT_COUNT = createField("RDB$SEGMENT_COUNT", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$INDICES.RDB$INDEX_INACTIVE</code>.
     */
    public final TableField<Rdb$indicesRecord, Short> RDB$INDEX_INACTIVE = createField("RDB$INDEX_INACTIVE", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$INDICES.RDB$INDEX_TYPE</code>.
     */
    public final TableField<Rdb$indicesRecord, Short> RDB$INDEX_TYPE = createField("RDB$INDEX_TYPE", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$INDICES.RDB$FOREIGN_KEY</code>.
     */
    public final TableField<Rdb$indicesRecord, String> RDB$FOREIGN_KEY = createField("RDB$FOREIGN_KEY", org.jooq.impl.SQLDataType.CHAR, this, "");

    /**
     * The column <code>RDB$INDICES.RDB$SYSTEM_FLAG</code>.
     */
    public final TableField<Rdb$indicesRecord, Short> RDB$SYSTEM_FLAG = createField("RDB$SYSTEM_FLAG", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$INDICES.RDB$EXPRESSION_BLR</code>.
     */
    public final TableField<Rdb$indicesRecord, byte[]> RDB$EXPRESSION_BLR = createField("RDB$EXPRESSION_BLR", org.jooq.impl.SQLDataType.BLOB, this, "");

    /**
     * The column <code>RDB$INDICES.RDB$EXPRESSION_SOURCE</code>.
     */
    public final TableField<Rdb$indicesRecord, String> RDB$EXPRESSION_SOURCE = createField("RDB$EXPRESSION_SOURCE", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>RDB$INDICES.RDB$STATISTICS</code>.
     */
    public final TableField<Rdb$indicesRecord, Double> RDB$STATISTICS = createField("RDB$STATISTICS", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * Create a <code>RDB$INDICES</code> table reference
     */
    public Rdb$indices() {
        this(DSL.name("RDB$INDICES"), null);
    }

    /**
     * Create an aliased <code>RDB$INDICES</code> table reference
     */
    public Rdb$indices(String alias) {
        this(DSL.name(alias), RDB$INDICES);
    }

    /**
     * Create an aliased <code>RDB$INDICES</code> table reference
     */
    public Rdb$indices(Name alias) {
        this(alias, RDB$INDICES);
    }

    private Rdb$indices(Name alias, Table<Rdb$indicesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Rdb$indices(Name alias, Table<Rdb$indicesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Rdb$indices(Table<O> child, ForeignKey<O, Rdb$indicesRecord> key) {
        super(child, key, RDB$INDICES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rdb$indices as(String alias) {
        return new Rdb$indices(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rdb$indices as(Name alias) {
        return new Rdb$indices(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Rdb$indices rename(String name) {
        return new Rdb$indices(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Rdb$indices rename(Name name) {
        return new Rdb$indices(name, null);
    }
}
