/*
 * This file is generated by jOOQ.
 */
package ru.smartsarov.citylighting.sprut.tables;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.smartsarov.citylighting.sprut.DefaultSchema;
import ru.smartsarov.citylighting.sprut.tables.records.GetXgrpTypeRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GetXgrpType extends TableImpl<GetXgrpTypeRecord> {

    private static final long serialVersionUID = 333007995;

    /**
     * The reference instance of <code>GET_XGRP_TYPE</code>
     */
    public static final GetXgrpType GET_XGRP_TYPE = new GetXgrpType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GetXgrpTypeRecord> getRecordType() {
        return GetXgrpTypeRecord.class;
    }

    /**
     * The column <code>GET_XGRP_TYPE.GRPT_ID</code>.
     */
    public final TableField<GetXgrpTypeRecord, Integer> GRPT_ID = createField("GRPT_ID", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>GET_XGRP_TYPE.GRPT_NAME</code>.
     */
    public final TableField<GetXgrpTypeRecord, String> GRPT_NAME = createField("GRPT_NAME", org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>GET_XGRP_TYPE.GRPT_REM</code>.
     */
    public final TableField<GetXgrpTypeRecord, String> GRPT_REM = createField("GRPT_REM", org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * Create a <code>GET_XGRP_TYPE</code> table reference
     */
    public GetXgrpType() {
        this(DSL.name("GET_XGRP_TYPE"), null);
    }

    /**
     * Create an aliased <code>GET_XGRP_TYPE</code> table reference
     */
    public GetXgrpType(String alias) {
        this(DSL.name(alias), GET_XGRP_TYPE);
    }

    /**
     * Create an aliased <code>GET_XGRP_TYPE</code> table reference
     */
    public GetXgrpType(Name alias) {
        this(alias, GET_XGRP_TYPE);
    }

    private GetXgrpType(Name alias, Table<GetXgrpTypeRecord> aliased) {
        this(alias, aliased, new Field[0]);
    }

    private GetXgrpType(Name alias, Table<GetXgrpTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> GetXgrpType(Table<O> child, ForeignKey<O, GetXgrpTypeRecord> key) {
        super(child, key, GET_XGRP_TYPE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GetXgrpType as(String alias) {
        return new GetXgrpType(DSL.name(alias), this, parameters);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GetXgrpType as(Name alias) {
        return new GetXgrpType(alias, this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public GetXgrpType rename(String name) {
        return new GetXgrpType(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public GetXgrpType rename(Name name) {
        return new GetXgrpType(name, null, parameters);
    }

    /**
     * Call this table-valued function
     */
    public GetXgrpType call() {
        return new GetXgrpType(DSL.name(getName()), null, new Field[] { 
        });
    }
}
