/*
 * This file is generated by jOOQ.
 */
package ru.smartsarov.citylighting.sprut.tables;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.smartsarov.citylighting.sprut.DefaultSchema;
import ru.smartsarov.citylighting.sprut.tables.records.DualRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Dual extends TableImpl<DualRecord> {

    private static final long serialVersionUID = 1719030559;

    /**
     * The reference instance of <code>DUAL</code>
     */
    public static final Dual DUAL = new Dual();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DualRecord> getRecordType() {
        return DualRecord.class;
    }

    /**
     * The column <code>DUAL.ID</code>.
     */
    public final TableField<DualRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>DUAL</code> table reference
     */
    public Dual() {
        this(DSL.name("DUAL"), null);
    }

    /**
     * Create an aliased <code>DUAL</code> table reference
     */
    public Dual(String alias) {
        this(DSL.name(alias), DUAL);
    }

    /**
     * Create an aliased <code>DUAL</code> table reference
     */
    public Dual(Name alias) {
        this(alias, DUAL);
    }

    private Dual(Name alias, Table<DualRecord> aliased) {
        this(alias, aliased, new Field[0]);
    }

    private Dual(Name alias, Table<DualRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Dual(Table<O> child, ForeignKey<O, DualRecord> key) {
        super(child, key, DUAL);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Dual as(String alias) {
        return new Dual(DSL.name(alias), this, parameters);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Dual as(Name alias) {
        return new Dual(alias, this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public Dual rename(String name) {
        return new Dual(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public Dual rename(Name name) {
        return new Dual(name, null, parameters);
    }

    /**
     * Call this table-valued function
     */
    public Dual call() {
        return new Dual(DSL.name(getName()), null, new Field[] { 
        });
    }
}
