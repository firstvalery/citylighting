/*
 * This file is generated by jOOQ.
 */
package ru.smartsarov.citylighting.sprut.tables;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.smartsarov.citylighting.sprut.DefaultSchema;
import ru.smartsarov.citylighting.sprut.tables.records.ObjMapSetRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ObjMapSet extends TableImpl<ObjMapSetRecord> {

    private static final long serialVersionUID = -473824263;

    /**
     * The reference instance of <code>OBJ_MAP_SET</code>
     */
    public static final ObjMapSet OBJ_MAP_SET = new ObjMapSet();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ObjMapSetRecord> getRecordType() {
        return ObjMapSetRecord.class;
    }

    /**
     * The column <code>OBJ_MAP_SET.RESULT</code>.
     */
    public final TableField<ObjMapSetRecord, Integer> RESULT = createField("RESULT", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>OBJ_MAP_SET.CURRENT_TIME_STRING_PARAM</code>.
     */
    public final TableField<ObjMapSetRecord, String> CURRENT_TIME_STRING_PARAM = createField("CURRENT_TIME_STRING_PARAM", org.jooq.impl.SQLDataType.VARCHAR(24), this, "");

    /**
     * Create a <code>OBJ_MAP_SET</code> table reference
     */
    public ObjMapSet() {
        this(DSL.name("OBJ_MAP_SET"), null);
    }

    /**
     * Create an aliased <code>OBJ_MAP_SET</code> table reference
     */
    public ObjMapSet(String alias) {
        this(DSL.name(alias), OBJ_MAP_SET);
    }

    /**
     * Create an aliased <code>OBJ_MAP_SET</code> table reference
     */
    public ObjMapSet(Name alias) {
        this(alias, OBJ_MAP_SET);
    }

    private ObjMapSet(Name alias, Table<ObjMapSetRecord> aliased) {
        this(alias, aliased, new Field[6]);
    }

    private ObjMapSet(Name alias, Table<ObjMapSetRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ObjMapSet(Table<O> child, ForeignKey<O, ObjMapSetRecord> key) {
        super(child, key, OBJ_MAP_SET);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ObjMapSet as(String alias) {
        return new ObjMapSet(DSL.name(alias), this, parameters);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ObjMapSet as(Name alias) {
        return new ObjMapSet(alias, this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public ObjMapSet rename(String name) {
        return new ObjMapSet(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public ObjMapSet rename(Name name) {
        return new ObjMapSet(name, null, parameters);
    }

    /**
     * Call this table-valued function
     */
    public ObjMapSet call(Integer inObjId, Integer inObjType, Double inObjPosX, Double inObjPosY, Double inObjPosZ, String inActualParam) {
        return new ObjMapSet(DSL.name(getName()), null, new Field[] { 
              DSL.val(inObjId, org.jooq.impl.SQLDataType.INTEGER)
            , DSL.val(inObjType, org.jooq.impl.SQLDataType.INTEGER)
            , DSL.val(inObjPosX, org.jooq.impl.SQLDataType.DOUBLE)
            , DSL.val(inObjPosY, org.jooq.impl.SQLDataType.DOUBLE)
            , DSL.val(inObjPosZ, org.jooq.impl.SQLDataType.DOUBLE)
            , DSL.val(inActualParam, org.jooq.impl.SQLDataType.VARCHAR(200))
        });
    }

    /**
     * Call this table-valued function
     */
    public ObjMapSet call(Field<Integer> inObjId, Field<Integer> inObjType, Field<Double> inObjPosX, Field<Double> inObjPosY, Field<Double> inObjPosZ, Field<String> inActualParam) {
        return new ObjMapSet(DSL.name(getName()), null, new Field[] { 
              inObjId
            , inObjType
            , inObjPosX
            , inObjPosY
            , inObjPosZ
            , inActualParam
        });
    }
}
