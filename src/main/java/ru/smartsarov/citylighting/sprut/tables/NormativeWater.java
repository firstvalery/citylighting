/*
 * This file is generated by jOOQ.
 */
package ru.smartsarov.citylighting.sprut.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.smartsarov.citylighting.sprut.DefaultSchema;
import ru.smartsarov.citylighting.sprut.Keys;
import ru.smartsarov.citylighting.sprut.tables.records.NormativeWaterRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NormativeWater extends TableImpl<NormativeWaterRecord> {

    private static final long serialVersionUID = -946024594;

    /**
     * The reference instance of <code>NORMATIVE_WATER</code>
     */
    public static final NormativeWater NORMATIVE_WATER = new NormativeWater();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NormativeWaterRecord> getRecordType() {
        return NormativeWaterRecord.class;
    }

    /**
     * The column <code>NORMATIVE_WATER.ID</code>.
     */
    public final TableField<NormativeWaterRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>NORMATIVE_WATER.NORM_ID</code>.
     */
    public final TableField<NormativeWaterRecord, Integer> NORM_ID = createField("NORM_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>NORMATIVE_WATER.TYPE1</code>.
     */
    public final TableField<NormativeWaterRecord, Short> TYPE1 = createField("TYPE1", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>NORMATIVE_WATER.TYPE2</code>.
     */
    public final TableField<NormativeWaterRecord, Short> TYPE2 = createField("TYPE2", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>NORMATIVE_WATER.TYPE3</code>.
     */
    public final TableField<NormativeWaterRecord, Short> TYPE3 = createField("TYPE3", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>NORMATIVE_WATER.TYPE4</code>.
     */
    public final TableField<NormativeWaterRecord, Short> TYPE4 = createField("TYPE4", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>NORMATIVE_WATER.Q1</code>.
     */
    public final TableField<NormativeWaterRecord, Double> Q1 = createField("Q1", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>NORMATIVE_WATER.V1</code>.
     */
    public final TableField<NormativeWaterRecord, Double> V1 = createField("V1", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>NORMATIVE_WATER.V2</code>.
     */
    public final TableField<NormativeWaterRecord, Double> V2 = createField("V2", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>NORMATIVE_WATER.GV1</code>.
     */
    public final TableField<NormativeWaterRecord, Double> GV1 = createField("GV1", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>NORMATIVE_WATER.GV2</code>.
     */
    public final TableField<NormativeWaterRecord, Double> GV2 = createField("GV2", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>NORMATIVE_WATER.T1</code>.
     */
    public final TableField<NormativeWaterRecord, Double> T1 = createField("T1", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>NORMATIVE_WATER.T2</code>.
     */
    public final TableField<NormativeWaterRecord, Double> T2 = createField("T2", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>NORMATIVE_WATER.P1</code>.
     */
    public final TableField<NormativeWaterRecord, Double> P1 = createField("P1", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>NORMATIVE_WATER.P2</code>.
     */
    public final TableField<NormativeWaterRecord, Double> P2 = createField("P2", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * Create a <code>NORMATIVE_WATER</code> table reference
     */
    public NormativeWater() {
        this(DSL.name("NORMATIVE_WATER"), null);
    }

    /**
     * Create an aliased <code>NORMATIVE_WATER</code> table reference
     */
    public NormativeWater(String alias) {
        this(DSL.name(alias), NORMATIVE_WATER);
    }

    /**
     * Create an aliased <code>NORMATIVE_WATER</code> table reference
     */
    public NormativeWater(Name alias) {
        this(alias, NORMATIVE_WATER);
    }

    private NormativeWater(Name alias, Table<NormativeWaterRecord> aliased) {
        this(alias, aliased, null);
    }

    private NormativeWater(Name alias, Table<NormativeWaterRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> NormativeWater(Table<O> child, ForeignKey<O, NormativeWaterRecord> key) {
        super(child, key, NORMATIVE_WATER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<NormativeWaterRecord> getPrimaryKey() {
        return Keys.NORMATIVE_WATER_KEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<NormativeWaterRecord>> getKeys() {
        return Arrays.<UniqueKey<NormativeWaterRecord>>asList(Keys.NORMATIVE_WATER_KEY, Keys.NORMATIVE_WATER_UNQ);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NormativeWater as(String alias) {
        return new NormativeWater(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NormativeWater as(Name alias) {
        return new NormativeWater(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public NormativeWater rename(String name) {
        return new NormativeWater(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NormativeWater rename(Name name) {
        return new NormativeWater(name, null);
    }
}
