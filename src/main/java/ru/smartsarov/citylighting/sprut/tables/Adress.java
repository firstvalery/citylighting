/*
 * This file is generated by jOOQ.
 */
package ru.smartsarov.citylighting.sprut.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.smartsarov.citylighting.sprut.DefaultSchema;
import ru.smartsarov.citylighting.sprut.Keys;
import ru.smartsarov.citylighting.sprut.tables.records.AdressRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Adress extends TableImpl<AdressRecord> {

    private static final long serialVersionUID = 1030133218;

    /**
     * The reference instance of <code>ADRESS</code>
     */
    public static final Adress ADRESS = new Adress();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AdressRecord> getRecordType() {
        return AdressRecord.class;
    }

    /**
     * The column <code>ADRESS.ADR_ID</code>.
     */
    public final TableField<AdressRecord, Integer> ADR_ID = createField("ADR_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>ADRESS.ADR_HOME_ID</code>.
     */
    public final TableField<AdressRecord, Integer> ADR_HOME_ID = createField("ADR_HOME_ID", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>ADRESS.ADR_FLT_ID</code>.
     */
    public final TableField<AdressRecord, Integer> ADR_FLT_ID = createField("ADR_FLT_ID", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>ADRESS.ADR_MEMO</code>.
     */
    public final TableField<AdressRecord, String> ADR_MEMO = createField("ADR_MEMO", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * Create a <code>ADRESS</code> table reference
     */
    public Adress() {
        this(DSL.name("ADRESS"), null);
    }

    /**
     * Create an aliased <code>ADRESS</code> table reference
     */
    public Adress(String alias) {
        this(DSL.name(alias), ADRESS);
    }

    /**
     * Create an aliased <code>ADRESS</code> table reference
     */
    public Adress(Name alias) {
        this(alias, ADRESS);
    }

    private Adress(Name alias, Table<AdressRecord> aliased) {
        this(alias, aliased, null);
    }

    private Adress(Name alias, Table<AdressRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Adress(Table<O> child, ForeignKey<O, AdressRecord> key) {
        super(child, key, ADRESS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AdressRecord> getPrimaryKey() {
        return Keys.INTEG_3;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AdressRecord>> getKeys() {
        return Arrays.<UniqueKey<AdressRecord>>asList(Keys.INTEG_3);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Adress as(String alias) {
        return new Adress(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Adress as(Name alias) {
        return new Adress(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Adress rename(String name) {
        return new Adress(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Adress rename(Name name) {
        return new Adress(name, null);
    }
}
