/*
 * This file is generated by jOOQ.
 */
package ru.smartsarov.citylighting.sprut.tables;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.smartsarov.citylighting.sprut.DefaultSchema;
import ru.smartsarov.citylighting.sprut.tables.records.Rdb$userPrivilegesRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Rdb$userPrivileges extends TableImpl<Rdb$userPrivilegesRecord> {

    private static final long serialVersionUID = -1400141753;

    /**
     * The reference instance of <code>RDB$USER_PRIVILEGES</code>
     */
    public static final Rdb$userPrivileges RDB$USER_PRIVILEGES = new Rdb$userPrivileges();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Rdb$userPrivilegesRecord> getRecordType() {
        return Rdb$userPrivilegesRecord.class;
    }

    /**
     * The column <code>RDB$USER_PRIVILEGES.RDB$USER</code>.
     */
    public final TableField<Rdb$userPrivilegesRecord, String> RDB$USER = createField("RDB$USER", org.jooq.impl.SQLDataType.CHAR, this, "");

    /**
     * The column <code>RDB$USER_PRIVILEGES.RDB$GRANTOR</code>.
     */
    public final TableField<Rdb$userPrivilegesRecord, String> RDB$GRANTOR = createField("RDB$GRANTOR", org.jooq.impl.SQLDataType.CHAR, this, "");

    /**
     * The column <code>RDB$USER_PRIVILEGES.RDB$PRIVILEGE</code>.
     */
    public final TableField<Rdb$userPrivilegesRecord, String> RDB$PRIVILEGE = createField("RDB$PRIVILEGE", org.jooq.impl.SQLDataType.CHAR, this, "");

    /**
     * The column <code>RDB$USER_PRIVILEGES.RDB$GRANT_OPTION</code>.
     */
    public final TableField<Rdb$userPrivilegesRecord, Short> RDB$GRANT_OPTION = createField("RDB$GRANT_OPTION", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$USER_PRIVILEGES.RDB$RELATION_NAME</code>.
     */
    public final TableField<Rdb$userPrivilegesRecord, String> RDB$RELATION_NAME = createField("RDB$RELATION_NAME", org.jooq.impl.SQLDataType.CHAR, this, "");

    /**
     * The column <code>RDB$USER_PRIVILEGES.RDB$FIELD_NAME</code>.
     */
    public final TableField<Rdb$userPrivilegesRecord, String> RDB$FIELD_NAME = createField("RDB$FIELD_NAME", org.jooq.impl.SQLDataType.CHAR, this, "");

    /**
     * The column <code>RDB$USER_PRIVILEGES.RDB$USER_TYPE</code>.
     */
    public final TableField<Rdb$userPrivilegesRecord, Short> RDB$USER_TYPE = createField("RDB$USER_TYPE", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$USER_PRIVILEGES.RDB$OBJECT_TYPE</code>.
     */
    public final TableField<Rdb$userPrivilegesRecord, Short> RDB$OBJECT_TYPE = createField("RDB$OBJECT_TYPE", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * Create a <code>RDB$USER_PRIVILEGES</code> table reference
     */
    public Rdb$userPrivileges() {
        this(DSL.name("RDB$USER_PRIVILEGES"), null);
    }

    /**
     * Create an aliased <code>RDB$USER_PRIVILEGES</code> table reference
     */
    public Rdb$userPrivileges(String alias) {
        this(DSL.name(alias), RDB$USER_PRIVILEGES);
    }

    /**
     * Create an aliased <code>RDB$USER_PRIVILEGES</code> table reference
     */
    public Rdb$userPrivileges(Name alias) {
        this(alias, RDB$USER_PRIVILEGES);
    }

    private Rdb$userPrivileges(Name alias, Table<Rdb$userPrivilegesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Rdb$userPrivileges(Name alias, Table<Rdb$userPrivilegesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Rdb$userPrivileges(Table<O> child, ForeignKey<O, Rdb$userPrivilegesRecord> key) {
        super(child, key, RDB$USER_PRIVILEGES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rdb$userPrivileges as(String alias) {
        return new Rdb$userPrivileges(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rdb$userPrivileges as(Name alias) {
        return new Rdb$userPrivileges(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Rdb$userPrivileges rename(String name) {
        return new Rdb$userPrivileges(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Rdb$userPrivileges rename(Name name) {
        return new Rdb$userPrivileges(name, null);
    }
}
