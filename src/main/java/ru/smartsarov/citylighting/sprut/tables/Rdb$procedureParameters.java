/*
 * This file is generated by jOOQ.
 */
package ru.smartsarov.citylighting.sprut.tables;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.smartsarov.citylighting.sprut.DefaultSchema;
import ru.smartsarov.citylighting.sprut.tables.records.Rdb$procedureParametersRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Rdb$procedureParameters extends TableImpl<Rdb$procedureParametersRecord> {

    private static final long serialVersionUID = 535723870;

    /**
     * The reference instance of <code>RDB$PROCEDURE_PARAMETERS</code>
     */
    public static final Rdb$procedureParameters RDB$PROCEDURE_PARAMETERS = new Rdb$procedureParameters();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Rdb$procedureParametersRecord> getRecordType() {
        return Rdb$procedureParametersRecord.class;
    }

    /**
     * The column <code>RDB$PROCEDURE_PARAMETERS.RDB$PARAMETER_NAME</code>.
     */
    public final TableField<Rdb$procedureParametersRecord, String> RDB$PARAMETER_NAME = createField("RDB$PARAMETER_NAME", org.jooq.impl.SQLDataType.CHAR, this, "");

    /**
     * The column <code>RDB$PROCEDURE_PARAMETERS.RDB$PROCEDURE_NAME</code>.
     */
    public final TableField<Rdb$procedureParametersRecord, String> RDB$PROCEDURE_NAME = createField("RDB$PROCEDURE_NAME", org.jooq.impl.SQLDataType.CHAR, this, "");

    /**
     * The column <code>RDB$PROCEDURE_PARAMETERS.RDB$PARAMETER_NUMBER</code>.
     */
    public final TableField<Rdb$procedureParametersRecord, Short> RDB$PARAMETER_NUMBER = createField("RDB$PARAMETER_NUMBER", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$PROCEDURE_PARAMETERS.RDB$PARAMETER_TYPE</code>.
     */
    public final TableField<Rdb$procedureParametersRecord, Short> RDB$PARAMETER_TYPE = createField("RDB$PARAMETER_TYPE", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$PROCEDURE_PARAMETERS.RDB$FIELD_SOURCE</code>.
     */
    public final TableField<Rdb$procedureParametersRecord, String> RDB$FIELD_SOURCE = createField("RDB$FIELD_SOURCE", org.jooq.impl.SQLDataType.CHAR, this, "");

    /**
     * The column <code>RDB$PROCEDURE_PARAMETERS.RDB$DESCRIPTION</code>.
     */
    public final TableField<Rdb$procedureParametersRecord, String> RDB$DESCRIPTION = createField("RDB$DESCRIPTION", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>RDB$PROCEDURE_PARAMETERS.RDB$SYSTEM_FLAG</code>.
     */
    public final TableField<Rdb$procedureParametersRecord, Short> RDB$SYSTEM_FLAG = createField("RDB$SYSTEM_FLAG", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$PROCEDURE_PARAMETERS.RDB$DEFAULT_VALUE</code>.
     */
    public final TableField<Rdb$procedureParametersRecord, byte[]> RDB$DEFAULT_VALUE = createField("RDB$DEFAULT_VALUE", org.jooq.impl.SQLDataType.BLOB, this, "");

    /**
     * The column <code>RDB$PROCEDURE_PARAMETERS.RDB$DEFAULT_SOURCE</code>.
     */
    public final TableField<Rdb$procedureParametersRecord, String> RDB$DEFAULT_SOURCE = createField("RDB$DEFAULT_SOURCE", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>RDB$PROCEDURE_PARAMETERS.RDB$COLLATION_ID</code>.
     */
    public final TableField<Rdb$procedureParametersRecord, Short> RDB$COLLATION_ID = createField("RDB$COLLATION_ID", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$PROCEDURE_PARAMETERS.RDB$NULL_FLAG</code>.
     */
    public final TableField<Rdb$procedureParametersRecord, Short> RDB$NULL_FLAG = createField("RDB$NULL_FLAG", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$PROCEDURE_PARAMETERS.RDB$PARAMETER_MECHANISM</code>.
     */
    public final TableField<Rdb$procedureParametersRecord, Short> RDB$PARAMETER_MECHANISM = createField("RDB$PARAMETER_MECHANISM", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$PROCEDURE_PARAMETERS.RDB$FIELD_NAME</code>.
     */
    public final TableField<Rdb$procedureParametersRecord, String> RDB$FIELD_NAME = createField("RDB$FIELD_NAME", org.jooq.impl.SQLDataType.CHAR, this, "");

    /**
     * The column <code>RDB$PROCEDURE_PARAMETERS.RDB$RELATION_NAME</code>.
     */
    public final TableField<Rdb$procedureParametersRecord, String> RDB$RELATION_NAME = createField("RDB$RELATION_NAME", org.jooq.impl.SQLDataType.CHAR, this, "");

    /**
     * Create a <code>RDB$PROCEDURE_PARAMETERS</code> table reference
     */
    public Rdb$procedureParameters() {
        this(DSL.name("RDB$PROCEDURE_PARAMETERS"), null);
    }

    /**
     * Create an aliased <code>RDB$PROCEDURE_PARAMETERS</code> table reference
     */
    public Rdb$procedureParameters(String alias) {
        this(DSL.name(alias), RDB$PROCEDURE_PARAMETERS);
    }

    /**
     * Create an aliased <code>RDB$PROCEDURE_PARAMETERS</code> table reference
     */
    public Rdb$procedureParameters(Name alias) {
        this(alias, RDB$PROCEDURE_PARAMETERS);
    }

    private Rdb$procedureParameters(Name alias, Table<Rdb$procedureParametersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Rdb$procedureParameters(Name alias, Table<Rdb$procedureParametersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Rdb$procedureParameters(Table<O> child, ForeignKey<O, Rdb$procedureParametersRecord> key) {
        super(child, key, RDB$PROCEDURE_PARAMETERS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rdb$procedureParameters as(String alias) {
        return new Rdb$procedureParameters(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rdb$procedureParameters as(Name alias) {
        return new Rdb$procedureParameters(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Rdb$procedureParameters rename(String name) {
        return new Rdb$procedureParameters(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Rdb$procedureParameters rename(Name name) {
        return new Rdb$procedureParameters(name, null);
    }
}
