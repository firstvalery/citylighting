/*
 * This file is generated by jOOQ.
 */
package ru.smartsarov.citylighting.sprut.tables;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.smartsarov.citylighting.sprut.DefaultSchema;
import ru.smartsarov.citylighting.sprut.tables.records.Rdb$functionArgumentsRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Rdb$functionArguments extends TableImpl<Rdb$functionArgumentsRecord> {

    private static final long serialVersionUID = -800018579;

    /**
     * The reference instance of <code>RDB$FUNCTION_ARGUMENTS</code>
     */
    public static final Rdb$functionArguments RDB$FUNCTION_ARGUMENTS = new Rdb$functionArguments();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Rdb$functionArgumentsRecord> getRecordType() {
        return Rdb$functionArgumentsRecord.class;
    }

    /**
     * The column <code>RDB$FUNCTION_ARGUMENTS.RDB$FUNCTION_NAME</code>.
     */
    public final TableField<Rdb$functionArgumentsRecord, String> RDB$FUNCTION_NAME = createField("RDB$FUNCTION_NAME", org.jooq.impl.SQLDataType.CHAR, this, "");

    /**
     * The column <code>RDB$FUNCTION_ARGUMENTS.RDB$ARGUMENT_POSITION</code>.
     */
    public final TableField<Rdb$functionArgumentsRecord, Short> RDB$ARGUMENT_POSITION = createField("RDB$ARGUMENT_POSITION", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$FUNCTION_ARGUMENTS.RDB$MECHANISM</code>.
     */
    public final TableField<Rdb$functionArgumentsRecord, Short> RDB$MECHANISM = createField("RDB$MECHANISM", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$FUNCTION_ARGUMENTS.RDB$FIELD_TYPE</code>.
     */
    public final TableField<Rdb$functionArgumentsRecord, Short> RDB$FIELD_TYPE = createField("RDB$FIELD_TYPE", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$FUNCTION_ARGUMENTS.RDB$FIELD_SCALE</code>.
     */
    public final TableField<Rdb$functionArgumentsRecord, Short> RDB$FIELD_SCALE = createField("RDB$FIELD_SCALE", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$FUNCTION_ARGUMENTS.RDB$FIELD_LENGTH</code>.
     */
    public final TableField<Rdb$functionArgumentsRecord, Short> RDB$FIELD_LENGTH = createField("RDB$FIELD_LENGTH", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$FUNCTION_ARGUMENTS.RDB$FIELD_SUB_TYPE</code>.
     */
    public final TableField<Rdb$functionArgumentsRecord, Short> RDB$FIELD_SUB_TYPE = createField("RDB$FIELD_SUB_TYPE", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$FUNCTION_ARGUMENTS.RDB$CHARACTER_SET_ID</code>.
     */
    public final TableField<Rdb$functionArgumentsRecord, Short> RDB$CHARACTER_SET_ID = createField("RDB$CHARACTER_SET_ID", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$FUNCTION_ARGUMENTS.RDB$FIELD_PRECISION</code>.
     */
    public final TableField<Rdb$functionArgumentsRecord, Short> RDB$FIELD_PRECISION = createField("RDB$FIELD_PRECISION", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$FUNCTION_ARGUMENTS.RDB$CHARACTER_LENGTH</code>.
     */
    public final TableField<Rdb$functionArgumentsRecord, Short> RDB$CHARACTER_LENGTH = createField("RDB$CHARACTER_LENGTH", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * Create a <code>RDB$FUNCTION_ARGUMENTS</code> table reference
     */
    public Rdb$functionArguments() {
        this(DSL.name("RDB$FUNCTION_ARGUMENTS"), null);
    }

    /**
     * Create an aliased <code>RDB$FUNCTION_ARGUMENTS</code> table reference
     */
    public Rdb$functionArguments(String alias) {
        this(DSL.name(alias), RDB$FUNCTION_ARGUMENTS);
    }

    /**
     * Create an aliased <code>RDB$FUNCTION_ARGUMENTS</code> table reference
     */
    public Rdb$functionArguments(Name alias) {
        this(alias, RDB$FUNCTION_ARGUMENTS);
    }

    private Rdb$functionArguments(Name alias, Table<Rdb$functionArgumentsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Rdb$functionArguments(Name alias, Table<Rdb$functionArgumentsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Rdb$functionArguments(Table<O> child, ForeignKey<O, Rdb$functionArgumentsRecord> key) {
        super(child, key, RDB$FUNCTION_ARGUMENTS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rdb$functionArguments as(String alias) {
        return new Rdb$functionArguments(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rdb$functionArguments as(Name alias) {
        return new Rdb$functionArguments(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Rdb$functionArguments rename(String name) {
        return new Rdb$functionArguments(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Rdb$functionArguments rename(Name name) {
        return new Rdb$functionArguments(name, null);
    }
}
